#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—ñ–≤
–ü–æ–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.
"""

from app import create_app
from app.models import (
    User,
    WriteOffReason,
    PaymentMethod,
    Brand,
    Product,
    StockLevel,
    GoodsReceipt,
    Sale,
    SaleItem,
    Client,
    Appointment,
    ProductWriteOff,
    InventoryAct,
)


def check_database_state():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    app = create_app()

    with app.app_context():
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        print("=" * 50)

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        users = User.query.all()
        admins = [u for u in users if u.is_admin]
        masters = [u for u in users if not u.is_admin]

        print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {len(users)} –∑–∞–≥–∞–ª–æ–º")
        print(f"   üîë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏: {len(admins)}")
        print(f"   ‚úÇÔ∏è  –ú–∞–π—Å—Ç—Ä–∏: {len(masters)}")

        if admins:
            print("   –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:")
            for admin in admins:
                print(f"     - {admin.username} ({admin.full_name})")

        # –ö–ª—ñ—î–Ω—Ç–∏
        clients = Client.query.all()
        print(f"\nüë§ –ö–ª—ñ—î–Ω—Ç–∏: {len(clients)}")

        if clients:
            for client in clients:
                print(f"   - {client.name} ({client.phone or '–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É'})")

        # –ü—Ä–∏—á–∏–Ω–∏ —Å–ø–∏—Å–∞–Ω–Ω—è
        reasons = WriteOffReason.query.all()
        active_reasons = [r for r in reasons if r.is_active]
        print(f"\nüìù –ü—Ä–∏—á–∏–Ω–∏ —Å–ø–∏—Å–∞–Ω–Ω—è: {len(reasons)} –∑–∞–≥–∞–ª–æ–º")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ: {len(active_reasons)}")

        if active_reasons:
            print("   –ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–∏—á–∏–Ω–∏:")
            for reason in active_reasons:
                print(f"     - {reason.name}")

        # –ú–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏
        payment_methods = PaymentMethod.query.all()
        print(f"\nüí≥ –ú–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏: {len(payment_methods)}")

        if payment_methods:
            for method in payment_methods:
                print(f"   - {method.name}")

        # –ë—Ä–µ–Ω–¥–∏
        brands = Brand.query.all()
        print(f"\nüè∑Ô∏è  –ë—Ä–µ–Ω–¥–∏: {len(brands)}")

        if brands:
            for brand in brands:
                product_count = Product.query.filter_by(brand_id=brand.id).count()
                print(f"   - {brand.name} ({product_count} —Ç–æ–≤–∞—Ä—ñ–≤)")

        # –¢–æ–≤–∞—Ä–∏
        products = Product.query.all()
        print(f"\nüì¶ –¢–æ–≤–∞—Ä–∏: {len(products)}")

        if products:
            print("   –¢–æ–≤–∞—Ä–∏ —Ç–∞ –∑–∞–ª–∏—à–∫–∏:")
            for product in products:
                stock = StockLevel.query.filter_by(product_id=product.id).first()
                stock_qty = stock.quantity if stock else 0
                cost_price = product.last_cost_price or 0
                print(f"     - {product.name} (SKU: {product.sku})")
                print(f"       –ó–∞–ª–∏—à–æ–∫: {stock_qty} —à—Ç., –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {cost_price} –≥—Ä–Ω")

        # –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
        receipts = GoodsReceipt.query.all()
        print(f"\nüìã –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {len(receipts)}")

        if receipts:
            for receipt in receipts:
                receipt_number = receipt.receipt_number or f"‚Ññ{receipt.id}"
                items_count = len(receipt.items)
                print(f"   - {receipt_number} –≤—ñ–¥ {receipt.receipt_date} ({items_count} –ø–æ–∑–∏—Ü—ñ–π)")

        # –ü—Ä–æ–¥–∞–∂—ñ
        sales = Sale.query.all()
        total_sales_amount = sum(sale.total_amount for sale in sales)
        anonymous_sales = Sale.query.filter(Sale.client_id.is_(None)).count()
        client_sales = Sale.query.filter(Sale.client_id.isnot(None)).count()
        linked_sales = Sale.query.filter(Sale.appointment_id.isnot(None)).count()

        print(f"\nüõí –ü—Ä–æ–¥–∞–∂—ñ: {len(sales)}")
        print(f"   üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤: {total_sales_amount:.2f} –≥—Ä–Ω")
        print(f"   üìä –ê–Ω–æ–Ω—ñ–º–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ: {anonymous_sales}")
        print(f"   üë§ –ü—Ä–æ–¥–∞–∂—ñ –∫–ª—ñ—î–Ω—Ç–∞–º: {client_sales}")
        print(f"   üîó –ü—Ä–æ–¥–∞–∂—ñ –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é –¥–æ –∑–∞–ø–∏—Å—ñ–≤: {linked_sales}")

        # Show recent sales with appointment links
        if sales:
            print("   –û—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ:")
            recent_sales = Sale.query.order_by(Sale.id.desc()).limit(5).all()
            for sale in recent_sales:
                client_name = sale.client.name if sale.client else "–ê–Ω–æ–Ω—ñ–º–Ω–∏–π"
                appointment_info = f" ‚Üí –ó–∞–ø–∏—Å #{sale.appointment_id}" if sale.appointment_id else ""
                item_count = SaleItem.query.filter_by(sale_id=sale.id).count()
                print(
                    f"     - #{sale.id}: {client_name}, {sale.total_amount:.2f} –≥—Ä–Ω ({item_count} –ø–æ–∑.) {sale.sale_date.strftime('%d.%m.%Y %H:%M')}{appointment_info}"
                )

        # Appointments statistics
        appointments = Appointment.query.all()
        appointments_with_sales = len([a for a in appointments if Sale.query.filter_by(appointment_id=a.id).first()])

        print(f"\nüìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏: {len(appointments)}")
        print(f"   üîó –ó–∞–ø–∏—Å–∏ –∑ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏: {appointments_with_sales}")

        if appointments_with_sales > 0:
            print("   –ó–∞–ø–∏—Å–∏ –∑ –ø—Ä–æ–¥–∞–∂–∞–º–∏:")
            for appointment in appointments:
                linked_sales_count = Sale.query.filter_by(appointment_id=appointment.id).count()
                if linked_sales_count > 0:
                    print(
                        f"     - –ó–∞–ø–∏—Å #{appointment.id}: {appointment.client.name} " f"({linked_sales_count} –ø—Ä–æ–¥–∞–∂—ñ–≤)"
                    )

        # Calculate profit
        profit_info = []
        for sale in sales:
            sale_items = SaleItem.query.filter_by(sale_id=sale.id).all()
            sale_cost = sum(item.total_cost for item in sale_items)
            sale_profit = sale.total_amount - sale_cost
            profit_info.append(sale_profit)

        # –ü–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—ñ–≤
        sale_items = SaleItem.query.all()
        if sale_items:
            total_items_sold = sum(item.quantity for item in sale_items)
            total_profit = sum(item.profit for item in sale_items)
            print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤:")
            print(f"   üî¢ –í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π: {len(sale_items)}")
            print(f"   üì¶ –í—Å—å–æ–≥–æ –æ–¥–∏–Ω–∏—Ü—å –ø—Ä–æ–¥–∞–Ω–æ: {total_items_sold}")
            print(f"   üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {total_profit:.2f} –≥—Ä–Ω")

        # Warehouse operations statistics
        write_offs = ProductWriteOff.query.all()
        inventory_acts = InventoryAct.query.all()

        print("\nüè≠ –°–∫–ª–∞–¥—Å—å–∫—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:")
        print(f"   üìù –î–æ–∫—É–º–µ–Ω—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è: {len(write_offs)}")
        print(f"   üìã –ê–∫—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó: {len(inventory_acts)}")

        if write_offs:
            total_writeoff_cost = sum(write_off.total_cost for write_off in write_offs)
            print(f"   üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å —Å–ø–∏—Å–∞–Ω—å: {total_writeoff_cost:.2f} –≥—Ä–Ω")

            print("   –û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–∏—Å–∞–Ω–Ω—è:")
            recent_writeoffs = ProductWriteOff.query.order_by(ProductWriteOff.id.desc()).limit(3).all()
            for wo in recent_writeoffs:
                reason_name = wo.reason.name if wo.reason else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
                date_str = wo.write_off_date.strftime("%d.%m.%Y")
                wo_details = f"#{wo.id}: {reason_name}, {wo.total_cost:.2f} –≥—Ä–Ω ({date_str})"
                print(f"     - {wo_details}")

        if inventory_acts:
            completed_acts = [act for act in inventory_acts if act.status == "completed"]
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó: {len(completed_acts)}")

            if completed_acts:
                print("   –û—Å—Ç–∞–Ω–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó:")
                recent_acts = sorted(completed_acts, key=lambda x: x.id, reverse=True)[:3]
                for act in recent_acts:
                    date_str = act.act_date.strftime("%d.%m.%Y")
                    print(f"     - #{act.id}: {act.status}, {date_str}")

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats_text = (
            f"Users: {len(users)}, Clients: {len(clients)}, Brands: {len(brands)}, " f"Products: {len(products)}"
        )
        print(f"   {stats_text}")
        print(f"   PaymentMethods: {len(payment_methods)}, WriteOffReasons: {len(reasons)}")
        warehouse_stats = f"GoodsReceipts: {len(receipts)}, Sales: {len(sales)}"
        print(f"   {warehouse_stats}")
        warehouse_ops = f"WriteOffs: {len(write_offs)}, InventoryActs: {len(inventory_acts)}"
        print(f"   {warehouse_ops}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (–ß–∞—Å—Ç–∏–Ω–∞ 6)
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤:")

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç –º–∞–π—Å—Ç—Ä—ñ–≤
        active_masters = [u for u in users if u.is_active_master and not u.is_admin]
        print(f"   üë®‚Äçüíº –ê–∫—Ç–∏–≤–Ω—ñ –º–∞–π—Å—Ç—Ä–∏: {len(active_masters)}")

        if active_masters:
            print("   –ú–∞–π—Å—Ç—Ä–∏ –∑ –∫–æ–º—ñ—Å—ñ–π–Ω–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏:")
            for master in active_masters:
                commission_rate = master.configurable_commission_rate or 0
                master_appointments = Appointment.query.filter_by(master_id=master.id, status="completed").count()
                master_sales_count = Sale.query.filter_by(user_id=master.id).count()
                master_info = (
                    f"     - {master.full_name}: {commission_rate}% –∫–æ–º—ñ—Å—ñ—ó, "
                    f"{master_appointments} –∑–∞–ø–∏—Å—ñ–≤, {master_sales_count} –ø—Ä–æ–¥–∞–∂—ñ–≤"
                )
                print(master_info)

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        print(f"   üëî –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏: {len(admins)}")

        if admins:
            print("   –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ –∫–æ–º—ñ—Å—ñ–π–Ω–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏:")
            for admin in admins:
                commission_rate = admin.configurable_commission_rate or 0
                admin_appointments = Appointment.query.filter_by(master_id=admin.id, status="completed").count()
                admin_sales_count = Sale.query.filter_by(user_id=admin.id).count()
                admin_info = (
                    f"     - {admin.full_name}: {commission_rate}% –∫–æ–º—ñ—Å—ñ—ó, "
                    f"{admin_appointments} –∑–∞–ø–∏—Å—ñ–≤, {admin_sales_count} –ø—Ä–æ–¥–∞–∂—ñ–≤"
                )
                print(admin_info)

        # –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_appointments_revenue = sum(
            appointment.amount_paid or 0 for appointment in Appointment.query.filter_by(status="completed").all()
        )
        total_sales_revenue = sum(sale.total_amount for sale in sales)

        print(f"   üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –≤—ñ–¥ –ø–æ—Å–ª—É–≥: {total_appointments_revenue:.2f} –≥—Ä–Ω")
        print(f"   üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –≤—ñ–¥ –ø—Ä–æ–¥–∞–∂—ñ–≤: {total_sales_revenue:.2f} –≥—Ä–Ω")
        total_revenue = total_appointments_revenue + total_sales_revenue
        print(f"   üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_revenue:.2f} –≥—Ä–Ω")

        print("\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    check_database_state()
