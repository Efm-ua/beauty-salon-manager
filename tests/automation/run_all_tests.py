#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ Beauty Salon Manager
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É, backend —Ç–µ—Å—Ç–∏, UI —Ç–µ—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
"""

import subprocess
import sys
import time
import os
from pathlib import Path


# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
class Colors:
    GREEN = "\033[92m"
    RED = "\033[91m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    BOLD = "\033[1m"
    END = "\033[0m"


def print_header(text):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫–æ–ª—å–æ—Ä–æ–º."""
    print(f"\n{Colors.CYAN}{Colors.BOLD}{'='*60}{Colors.END}")
    print(f"{Colors.CYAN}{Colors.BOLD}{text.center(60)}{Colors.END}")
    print(f"{Colors.CYAN}{Colors.BOLD}{'='*60}{Colors.END}")


def print_step(step_num, text):
    """–í–∏–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫—Ä–æ–∫—É."""
    print(f"\n{Colors.YELLOW}{Colors.BOLD}üìã –ö—Ä–æ–∫ {step_num}: {text}{Colors.END}")


def print_success(text):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö."""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")


def print_error(text):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É."""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")


def print_warning(text):
    """–í–∏–≤–æ–¥–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è."""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")


def run_script(script_path, description):
    """–ó–∞–ø—É—Å–∫–∞—î Python —Å–∫—Ä–∏–ø—Ç —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î True –ø—Ä–∏ —É—Å–ø—ñ—Ö—É."""
    print(f"\n{Colors.BLUE}üöÄ –ó–∞–ø—É—Å–∫: {description}{Colors.END}")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: python {script_path}")

    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç—ñ–≤
        original_dir = os.getcwd()
        project_root = Path(__file__).parent.parent.parent
        os.chdir(project_root)

        result = subprocess.run([sys.executable, script_path], capture_output=True, text=True, cwd=project_root)

        os.chdir(original_dir)

        if result.returncode == 0:
            print_success(f"{description} - –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            if result.stdout.strip():
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –≤–∏–≤–æ–¥—É
                lines = result.stdout.strip().split("\n")
                for line in lines[-3:]:
                    if line.strip():
                        print(f"   {Colors.WHITE}{line}{Colors.END}")
            return True
        else:
            print_error(f"{description} - –ü–æ–º–∏–ª–∫–∞!")
            if result.stderr:
                print(f"   –ü–æ–º–∏–ª–∫–∞: {result.stderr}")
            if result.stdout:
                print(f"   –í–∏–≤—ñ–¥: {result.stdout}")
            return False

    except Exception as e:
        print_error(f"{description} - –í–∏–Ω—è—Ç–æ–∫: {e}")
        return False


def check_flask_server():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Flask —Å–µ—Ä–≤–µ—Ä."""
    try:
        import requests

        response = requests.get("http://127.0.0.1:5000", timeout=5)
        return response.status_code == 200
    except Exception:
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤."""
    print_header("üß™ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–Ü –¢–ï–°–¢–ò BEAUTY SALON MANAGER")

    start_time = time.time()
    success_count = 0
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—ñ —Ç–µ—Å—Ç–∏...")
    print("=" * 80)

    total_steps = 10  # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –¥–æ 10
    current_step = 1

    # –ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞
    print_step(1, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    if run_script("tests/automation/create_test_admin.py", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è TestAdminAuto"):
        success_count += 1

    # –ö—Ä–æ–∫ 2: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    print_step(2, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö")
    if run_script("tests/automation/create_test_data.py", "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"):
        success_count += 1

    # –ö—Ä–æ–∫ 3: Backend —Ç–µ—Å—Ç–∏
    print_step(3, "Backend —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    if run_script("tests/automation/backend_tests_simple.py", "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π —Ç–∞ –ª–æ–≥—ñ–∫–∏"):
        success_count += 1

    # –ö—Ä–æ–∫ 4: UI —Ç–µ—Å—Ç–∏ –ß–∞—Å—Ç–∏–Ω–∏ 1 (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)
    print_step(4, "UI —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ß–∞—Å—Ç–∏–Ω–∞ 1: –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")
    if not check_flask_server():
        print_warning("Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://127.0.0.1:5000")
        print(f"   {Colors.WHITE}–ó–∞–ø—É—Å—Ç—ñ—Ç—å: python run.py{Colors.END}")
        print_error("UI —Ç–µ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        print_success("Flask —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        if run_script("tests/automation/automated_ui_test.py", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—ñ UI —Ç–µ—Å—Ç–∏ - –ß–∞—Å—Ç–∏–Ω–∞ 1"):
            success_count += 1

    # –ö—Ä–æ–∫ 5: UI —Ç–µ—Å—Ç–∏ –ß–∞—Å—Ç–∏–Ω–∏ 2
    print_step(5, "UI —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ß–∞—Å—Ç–∏–Ω–∞ 2: –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è")
    if not check_flask_server():
        print_warning("Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –¥–ª—è –ß–∞—Å—Ç–∏–Ω–∏ 2")
        print_error("UI —Ç–µ—Å—Ç–∏ –ß–∞—Å—Ç–∏–Ω–∏ 2 –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        if run_script("tests/automation/automated_part2_inventory.py", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—ñ UI —Ç–µ—Å—Ç–∏ - –ß–∞—Å—Ç–∏–Ω–∞ 2"):
            success_count += 1

    # –ö—Ä–æ–∫ 6: UI —Ç–µ—Å—Ç–∏ –ß–∞—Å—Ç–∏–Ω–∏ 3
    print_step(6, "UI —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ß–∞—Å—Ç–∏–Ω–∞ 3: –ü—Ä–æ—Ü–µ—Å –ø—Ä–æ–¥–∞–∂—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤")
    if not check_flask_server():
        print_warning("Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –¥–ª—è –ß–∞—Å—Ç–∏–Ω–∏ 3")
        print_error("UI —Ç–µ—Å—Ç–∏ –ß–∞—Å—Ç–∏–Ω–∏ 3 –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        if run_script("tests/automation/automated_part3_sales.py", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—ñ UI —Ç–µ—Å—Ç–∏ - –ß–∞—Å—Ç–∏–Ω–∞ 3"):
            success_count += 1

    # –ö—Ä–æ–∫ 7: –ß–∞—Å—Ç–∏–Ω–∞ 3 - –ü—Ä–æ—Ü–µ—Å –ü—Ä–æ–¥–∞–∂—ñ–≤ –¢–æ–≤–∞—Ä—ñ–≤
    print(f"\nüìä –ö—Ä–æ–∫ 7/{total_steps}: –ß–∞—Å—Ç–∏–Ω–∞ 3 - –ü—Ä–æ—Ü–µ—Å –ü—Ä–æ–¥–∞–∂—ñ–≤ –¢–æ–≤–∞—Ä—ñ–≤")
    print("-" * 60)
    try:
        from tests.automation.automated_part3_sales import AutomatedSalesTester

        sales_tester = AutomatedSalesTester()
        if sales_tester.run_all_tests():
            print("‚úÖ –ß–∞—Å—Ç–∏–Ω–∞ 3 (–ü—Ä–æ–¥–∞–∂—ñ) - –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
            success_count += 1
        else:
            print("‚ùå –ß–∞—Å—Ç–∏–Ω–∞ 3 (–ü—Ä–æ–¥–∞–∂—ñ) - –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ß–∞—Å—Ç–∏–Ω—ñ 3: {e}")

    # –ö—Ä–æ–∫ 8: –ß–∞—Å—Ç–∏–Ω–∞ 4 - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ü—Ä–æ–¥–∞–∂—ñ–≤ —É –ö–∞—Ä—Ç—Ü—ñ –ó–∞–ø–∏—Å—É
    print(f"\nüîó –ö—Ä–æ–∫ 8/{total_steps}: –ß–∞—Å—Ç–∏–Ω–∞ 4 - –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ü—Ä–æ–¥–∞–∂—ñ–≤ —É –ö–∞—Ä—Ç—Ü—ñ –ó–∞–ø–∏—Å—É")
    print("-" * 60)
    try:
        from tests.automation.automated_part4_appointment_integration import AutomatedAppointmentIntegrationTester

        integration_tester = AutomatedAppointmentIntegrationTester()
        if integration_tester.run_all_tests():
            print("‚úÖ –ß–∞—Å—Ç–∏–Ω–∞ 4 (–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤) - –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
            success_count += 1
        else:
            print("‚ùå –ß–∞—Å—Ç–∏–Ω–∞ 4 (–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤) - –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ß–∞—Å—Ç–∏–Ω—ñ 4: {e}")

    # –ö—Ä–æ–∫ 9: –ß–∞—Å—Ç–∏–Ω–∞ 5 - –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –°–∫–ª–∞–¥—Å—å–∫–∏–π –û–±–ª—ñ–∫
    print(f"\nüè≠ –ö—Ä–æ–∫ 9/{total_steps}: –ß–∞—Å—Ç–∏–Ω–∞ 5 - –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –°–∫–ª–∞–¥—Å—å–∫–∏–π –û–±–ª—ñ–∫")
    print("-" * 60)
    try:
        from tests.automation.automated_part5_warehouse import AutomatedWarehouseTester

        warehouse_tester = AutomatedWarehouseTester()
        if warehouse_tester.run_all_tests():
            print("‚úÖ –ß–∞—Å—Ç–∏–Ω–∞ 5 (–°–∫–ª–∞–¥—Å—å–∫–∏–π –æ–±–ª—ñ–∫) - –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
            success_count += 1
        else:
            print("‚ùå –ß–∞—Å—Ç–∏–Ω–∞ 5 (–°–∫–ª–∞–¥—Å—å–∫–∏–π –æ–±–ª—ñ–∫) - –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ß–∞—Å—Ç–∏–Ω—ñ 5: {e}")

    # –ö—Ä–æ–∫ 10: –ß–∞—Å—Ç–∏–Ω–∞ 6 - –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å
    print(f"\nüìä –ö—Ä–æ–∫ 10/{total_steps}: –ß–∞—Å—Ç–∏–Ω–∞ 6 - –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å")
    print("-" * 60)
    try:
        from tests.automation.automated_part6_reports import AutomatedReportsTester

        reports_tester = AutomatedReportsTester()
        if reports_tester.run_all_tests():
            print("‚úÖ –ß–∞—Å—Ç–∏–Ω–∞ 6 (–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å) - –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
            success_count += 1
        else:
            print("‚ùå –ß–∞—Å—Ç–∏–Ω–∞ 6 (–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å) - –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ß–∞—Å—Ç–∏–Ω—ñ 6: {e}")

    # –ü—ñ–¥—Å—É–º–æ–∫
    end_time = time.time()
    duration = end_time - start_time

    print_header("–ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print(f"‚è±Ô∏è  –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_steps} –∫—Ä–æ–∫—ñ–≤ —É—Å–ø—ñ—à–Ω–æ")

    if success_count == total_steps:
        print_success("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        return 0
    elif success_count >= total_steps - 2:  # –î–æ–∑–≤–æ–ª—è—î–º–æ 1-2 –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö —Ç–µ—Å—Ç–∏
        print_warning("‚ö†Ô∏è  –ú–∞–π–∂–µ –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ (–º–æ–∂–ª–∏–≤–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π)")
        return 1
    else:
        print_error("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏–≤—ñ–¥ –≤–∏—â–µ.")
        return 2


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
