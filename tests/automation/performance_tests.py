"""
–ù–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ - –§–∞–∑–∞ 5
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏

–¶–µ–π —Ñ–∞–π–ª –ø–æ–∫—Ä–∏–≤–∞—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
- –ö—Ä–æ–∫–∏ 5.1.1-5.1.4: –ë–∞–∑–æ–≤—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
- –ö—Ä–æ–∫–∏ 5.2.1-5.2.4: –¢–µ—Å—Ç–∏ –≤–µ–ª–∏–∫–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
"""

import pytest
import time
import threading
import psutil
import os
import gc
from datetime import date, datetime, time as dt_time, timedelta
from decimal import Decimal
from concurrent.futures import ThreadPoolExecutor, as_completed
from memory_profiler import profile
import tempfile
import sqlite3

from app.models import (
    Appointment,
    AppointmentService,
    Sale,
    SaleItem,
    PaymentMethod,
    User,
    Client,
    Service,
    Product,
    Brand,
    StockLevel,
    db,
)


class TestLargeDatasetPerformance:
    """
    –ö—Ä–æ–∫–∏ 5.1.1: –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∑ –≤–µ–ª–∏–∫–∏–º–∏ –æ–±—Å—è–≥–∞–º–∏ –¥–∞–Ω–∏—Ö
    """

    def test_large_sales_dataset_creation(self, app, session, admin_user, test_client, test_product, payment_methods):
        """
        –ö—Ä–æ–∫ 5.1.1a: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤

        –¢–µ—Å—Ç—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 1000+ –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤
        """
        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        records_count = 1000
        batch_size = 100

        print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {records_count} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤...")

        start_time = time.time()
        total_created = 0

        for batch_start in range(0, records_count, batch_size):
            batch_end = min(batch_start + batch_size, records_count)
            batch_sales = []

            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞—Ç—á –ø—Ä–æ–¥–∞–∂—ñ–≤
            for i in range(batch_start, batch_end):
                sale = Sale(
                    sale_date=datetime.now() - timedelta(days=i % 30),  # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 30 –¥–Ω—è—Ö
                    client_id=test_client.id,
                    user_id=admin_user.id,
                    total_amount=Decimal(f"{100 + (i % 500)}.00"),  # –í–∞—Ä—ñ–∞—Ü—ñ—è —Å—É–º
                    payment_method_id=cash_method.id,
                    created_by_user_id=admin_user.id,
                )
                session.add(sale)
                batch_sales.append(sale)

            # –ö–æ–º—ñ—Ç–∏–º–æ –±–∞—Ç—á
            session.commit()

            # –î–æ–¥–∞—î–º–æ SaleItems –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É
            for sale in batch_sales:
                sale_item = SaleItem(
                    sale_id=sale.id,
                    product_id=test_product.id,
                    quantity=1,
                    price_per_unit=sale.total_amount,
                    cost_price_per_unit=sale.total_amount / Decimal("2"),
                )
                session.add(sale_item)

            session.commit()
            total_created = batch_end

            # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            progress = (batch_end / records_count) * 100
            print(f"–ü—Ä–æ–≥—Ä–µ—Å: {progress:.1f}% ({batch_end}/{records_count})")

        end_time = time.time()
        total_time = end_time - start_time

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {total_created} –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {total_created/total_time:.2f} –∑–∞–ø–∏—Å—ñ–≤/—Å–µ–∫")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        assert total_time < 60.0, f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è {records_count} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞–π–Ω—è–ª–æ {total_time:.2f}—Å (–º–∞–∫—Å–∏–º—É–º 60—Å)"
        assert total_created == records_count, f"–°—Ç–≤–æ—Ä–µ–Ω–æ {total_created} –∑ {records_count} –∑–∞–ø–∏—Å—ñ–≤"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
        total_sales = Sale.query.count()
        assert total_sales >= records_count, f"–£ –ë–î –∑–Ω–∞–π–¥–µ–Ω–æ {total_sales} –ø—Ä–æ–¥–∞–∂—ñ–≤ (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å >= {records_count})"

    def test_large_appointments_dataset_queries(
        self, app, session, regular_user, test_client, test_service, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.1.1b: –ó–∞–ø–∏—Ç–∏ –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –Ω–∞–±–æ—Ä—É –∑–∞–ø–∏—Å—ñ–≤

        –¢–µ—Å—Ç—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
        """
        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –°—Ç–≤–æ—Ä—é—î–º–æ 500 –∑–∞–ø–∏—Å—ñ–≤
        appointments_count = 500
        print(f"\nüß™ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è {appointments_count} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤...")

        appointments = []
        for i in range(appointments_count):
            test_date = date.today() - timedelta(days=i % 60)  # –û—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤
            appointment = Appointment(
                client_id=test_client.id,
                master_id=regular_user.id,
                date=test_date,
                start_time=dt_time(9 + (i % 8), 0),  # 9:00 - 16:00
                end_time=dt_time(10 + (i % 8), 0),
                status=["scheduled", "completed", "cancelled"][i % 3],
                payment_status="paid" if i % 2 == 0 else "unpaid",
                amount_paid=Decimal(f"{200 + (i % 300)}.00"),
                payment_method_id=cash_method.id if i % 2 == 0 else None,
            )
            session.add(appointment)
            appointments.append(appointment)

        session.commit()

        # –î–æ–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥–∏ –¥–æ –∑–∞–ø–∏—Å—ñ–≤
        for appointment in appointments:
            appointment_service = AppointmentService(
                appointment_id=appointment.id, service_id=test_service.id, price=float(appointment.amount_paid)
            )
            session.add(appointment_service)

        session.commit()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {appointments_count} –∑–∞–ø–∏—Å—ñ–≤")

        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
        queries_to_test = [
            ("–í—Å—ñ –∑–∞–ø–∏—Å–∏", lambda: Appointment.query.all()),
            ("–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–ø–∏—Å–∏", lambda: Appointment.query.filter_by(status="completed").all()),
            (
                "–ó–∞–ø–∏—Å–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å",
                lambda: Appointment.query.filter(Appointment.date >= date.today() - timedelta(days=30)).all(),
            ),
            ("–ó–∞–ø–∏—Å–∏ –∑ –æ–ø–ª–∞—Ç–æ—é", lambda: Appointment.query.filter(Appointment.amount_paid > 0).all()),
            ("–ó–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞", lambda: Appointment.query.filter_by(master_id=regular_user.id).all()),
        ]

        for query_name, query_func in queries_to_test:
            start_time = time.time()
            results = query_func()
            end_time = time.time()
            query_time = end_time - start_time

            print(f"üìä {query_name}: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ {query_time:.3f}—Å")

            # –ó–∞–ø–∏—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è —à–≤–∏–¥–∫–æ
            assert query_time < 2.0, f"–ó–∞–ø–∏—Ç '{query_name}' –∑–∞–π–Ω—è–≤ {query_time:.3f}—Å (–º–∞–∫—Å–∏–º—É–º 2—Å)"

    def test_database_pagination_performance(self, app, session):
        """
        –ö—Ä–æ–∫ 5.1.1c: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –≤–µ–ª–∏–∫–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó...")

        page_size = 50
        max_pages = 10

        for page_num in range(1, max_pages + 1):
            start_time = time.time()

            # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —á–µ—Ä–µ–∑ SQLAlchemy
            sales_page = Sale.query.paginate(page=page_num, per_page=page_size, error_out=False)

            end_time = time.time()
            page_time = end_time - start_time

            print(f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page_num}: {len(sales_page.items)} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {page_time:.3f}—Å")

            # –ö–æ–∂–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è —à–≤–∏–¥–∫–æ
            assert page_time < 1.0, f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page_num} –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è –∑–∞ {page_time:.3f}—Å (–º–∞–∫—Å–∏–º—É–º 1—Å)"

            if not sales_page.items:  # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
                break


class TestPeakLoadStress:
    """
    –ö—Ä–æ–∫–∏ 5.1.2: –¢–µ—Å—Ç –ø—ñ–∫–æ–≤–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –Ω–∞ —Å–∏—Å—Ç–µ–º—É

    –°–∏–º—É–ª—é—î –æ–¥–Ω–æ—á–∞—Å–Ω—É —Ä–æ–±–æ—Ç—É –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    """

    def test_concurrent_sales_creation(self, app, session, admin_user, test_client, test_product, payment_methods):
        """
        –ö—Ä–æ–∫ 5.1.2a: –û–¥–Ω–æ—á–∞—Å–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤

        –°–∏–º—É–ª—é—î 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ —Å—Ç–≤–æ—Ä—é—é—Ç—å –ø—Ä–æ–¥–∞–∂—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        """
        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        def create_sale_batch(thread_id, sales_per_thread=20):
            """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
            thread_sales = []

            with app.app_context():
                for i in range(sales_per_thread):
                    sale = Sale(
                        sale_date=datetime.now(),
                        client_id=test_client.id,
                        user_id=admin_user.id,
                        total_amount=Decimal(f"{thread_id * 100 + i + 50}.00"),
                        payment_method_id=cash_method.id,
                        created_by_user_id=admin_user.id,
                    )
                    db.session.add(sale)
                    thread_sales.append(sale)

                try:
                    db.session.commit()
                    return len(thread_sales), None
                except Exception as e:
                    db.session.rollback()
                    return 0, str(e)

        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤...")

        num_threads = 10
        sales_per_thread = 20
        expected_total = num_threads * sales_per_thread

        start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            futures = [executor.submit(create_sale_batch, thread_id) for thread_id in range(num_threads)]

            results = []
            for future in as_completed(futures):
                created_count, error = future.result()
                results.append((created_count, error))

        end_time = time.time()
        total_time = end_time - start_time

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        total_created = sum(count for count, _ in results)
        errors = [error for _, error in results if error]

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {total_created}/{expected_total} –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ {total_time:.2f}—Å")
        print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {total_created/total_time:.2f} –∑–∞–ø–∏—Å—ñ–≤/—Å–µ–∫")

        if errors:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏: {len(errors)}")
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–º–∏–ª–∫–∏
                print(f"   - {error}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        success_rate = total_created / expected_total
        assert success_rate >= 0.8, f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å {success_rate:.1%} (–º—ñ–Ω—ñ–º—É–º 80%)"
        assert total_time < 30.0, f"–û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–Ω—è–ª–∞ {total_time:.2f}—Å (–º–∞–∫—Å–∏–º—É–º 30—Å)"

    def test_concurrent_report_generation(self, app, session, admin_user):
        """
        –ö—Ä–æ–∫ 5.1.2b: –û–¥–Ω–æ—á–∞—Å–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤

        –°–∏–º—É–ª—é—î –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å –∑–≤—ñ—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        """

        def generate_report(report_type, thread_id):
            """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
            with app.app_context():
                start_date = date.today() - timedelta(days=30)
                end_date = date.today()

                try:
                    start_time = time.time()

                    if report_type == "sales":
                        # –ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö
                        sales = Sale.query.filter(
                            Sale.sale_date >= datetime.combine(start_date, dt_time.min),
                            Sale.sale_date <= datetime.combine(end_date, dt_time.max),
                        ).all()
                        result_count = len(sales)

                    elif report_type == "appointments":
                        # –ó–≤—ñ—Ç –ø–æ –∑–∞–ø–∏—Å–∞—Ö
                        appointments = Appointment.query.filter(
                            Appointment.date >= start_date, Appointment.date <= end_date
                        ).all()
                        result_count = len(appointments)

                    else:
                        result_count = 0

                    end_time = time.time()
                    generation_time = end_time - start_time

                    return result_count, generation_time, None

                except Exception as e:
                    return 0, 0, str(e)

        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤...")

        reports_to_generate = [
            ("sales", "–ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö"),
            ("appointments", "–ó–≤—ñ—Ç –ø–æ –∑–∞–ø–∏—Å–∞—Ö"),
            ("sales", "–ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö"),
            ("appointments", "–ó–≤—ñ—Ç –ø–æ –∑–∞–ø–∏—Å–∞—Ö"),
            ("sales", "–ó–≤—ñ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞—Ö"),
        ]

        start_time = time.time()

        with ThreadPoolExecutor(max_workers=len(reports_to_generate)) as executor:
            futures = [
                executor.submit(generate_report, report_type, i)
                for i, (report_type, _) in enumerate(reports_to_generate)
            ]

            results = []
            for i, future in enumerate(as_completed(futures)):
                result_count, generation_time, error = future.result()
                report_name = reports_to_generate[i][1]
                results.append((report_name, result_count, generation_time, error))

        end_time = time.time()
        total_time = end_time - start_time

        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(results)} –∑–≤—ñ—Ç—ñ–≤ –∑–∞ {total_time:.2f}—Å")

        successful_reports = 0
        for report_name, count, gen_time, error in results:
            if error:
                print(f"‚ùå {report_name}: –ø–æ–º–∏–ª–∫–∞ - {error}")
            else:
                print(f"‚úÖ {report_name}: {count} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {gen_time:.2f}—Å")
                successful_reports += 1

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        success_rate = successful_reports / len(reports_to_generate)
        assert success_rate >= 0.8, f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤ {success_rate:.1%} (–º—ñ–Ω—ñ–º—É–º 80%)"


class TestLongTermStability:
    """
    –ö—Ä–æ–∫–∏ 5.1.3: –¢–µ—Å—Ç —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –ø—Ä–∏ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ–π —Ä–æ–±–æ—Ç—ñ

    –°–∏–º—É–ª—é—î –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—É —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏
    """

    def test_extended_operations_cycle(
        self, app, session, admin_user, regular_user, test_client, test_product, test_service, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.1.3a: –¶–∏–∫–ª –æ–ø–µ—Ä–∞—Ü—ñ–π –ø—Ä–æ—Ç—è–≥–æ–º —Ç—Ä–∏–≤–∞–ª–æ–≥–æ —á–∞—Å—É

        –°–∏–º—É–ª—é—î —Ä–æ–±–æ—Ç—É —Å–∞–ª–æ–Ω—É –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ (—Å–∏–º—É–ª—è—Ü—ñ—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è)...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        total_cycles = 100  # –°–∏–º—É–ª—é—î–º–æ 100 "–∫–ª—ñ—î–Ω—Ç—ñ–≤"
        operations_per_cycle = 3  # –ö–æ–∂–µ–Ω –∫–ª—ñ—î–Ω—Ç —Ä–æ–±–∏—Ç—å 3 –æ–ø–µ—Ä–∞—Ü—ñ—ó

        start_time = time.time()
        successful_operations = 0
        errors = []

        for cycle in range(total_cycles):
            cycle_start = time.time()

            try:
                # –û–ø–µ—Ä–∞—Ü—ñ—è 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
                sale = Sale(
                    sale_date=datetime.now(),
                    client_id=test_client.id,
                    user_id=admin_user.id,
                    total_amount=Decimal(f"{150 + (cycle % 200)}.00"),
                    payment_method_id=cash_method.id,
                    created_by_user_id=admin_user.id,
                )
                session.add(sale)
                session.commit()

                # –û–ø–µ—Ä–∞—Ü—ñ—è 2: –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –¥–æ –ø—Ä–æ–¥–∞–∂—É
                sale_item = SaleItem(
                    sale_id=sale.id,
                    product_id=test_product.id,
                    quantity=1 + (cycle % 3),
                    price_per_unit=sale.total_amount,
                    cost_price_per_unit=sale.total_amount / Decimal("2"),
                )
                session.add(sale_item)
                session.commit()

                # –û–ø–µ—Ä–∞—Ü—ñ—è 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
                appointment = Appointment(
                    client_id=test_client.id,
                    master_id=regular_user.id,
                    date=date.today() + timedelta(days=cycle % 7),
                    start_time=dt_time(9 + (cycle % 8), 0),
                    end_time=dt_time(10 + (cycle % 8), 0),
                    status="completed",
                    payment_status="paid",
                    amount_paid=Decimal(f"{300 + (cycle % 100)}.00"),
                    payment_method_id=cash_method.id,
                )
                session.add(appointment)
                session.commit()

                successful_operations += operations_per_cycle

                # –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 —Ü–∏–∫–ª—ñ–≤
                if (cycle + 1) % 10 == 0:
                    elapsed = time.time() - start_time
                    print(f"–¶–∏–∫–ª {cycle + 1}/{total_cycles}: {successful_operations} –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ {elapsed:.1f}—Å")

                # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏
                time.sleep(0.01)

            except Exception as e:
                errors.append(f"–¶–∏–∫–ª {cycle}: {str(e)}")
                session.rollback()

                # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
                if len(errors) > 10:
                    print(f"‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ ({len(errors)}), –ø—Ä–∏–ø–∏–Ω—è—î–º–æ —Ç–µ—Å—Ç")
                    break

        end_time = time.time()
        total_time = end_time - start_time

        expected_operations = total_cycles * operations_per_cycle
        success_rate = successful_operations / expected_operations if expected_operations > 0 else 0

        print(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ {successful_operations}/{expected_operations} –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ {total_time:.2f}—Å")
        print(f"üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1%}")
        print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {successful_operations/total_time:.2f} –æ–ø–µ—Ä–∞—Ü—ñ–π/—Å–µ–∫")

        if errors:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏ ({len(errors)}):")
            for error in errors[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                print(f"   - {error}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        assert success_rate >= 0.9, f"–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å {success_rate:.1%} (–º—ñ–Ω—ñ–º—É–º 90%)"
        assert len(errors) <= 5, f"–ó–∞–±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫: {len(errors)} (–º–∞–∫—Å–∏–º—É–º 5)"

    @pytest.mark.slow
    def test_memory_leak_detection(self, app, session, admin_user, test_client, test_product, payment_methods):
        """
        –ö—Ä–æ–∫ 5.1.3b: –í–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ

        –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∏–≤–∞–ª–æ—ó —Ä–æ–±–æ—Ç–∏
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB

        print(f"üîß –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {initial_memory:.1f} MB")

        memory_measurements = [initial_memory]
        operations_count = 200

        for i in range(operations_count):
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –æ–±'—î–∫—Ç–∏
            sale = Sale(
                sale_date=datetime.now(),
                client_id=test_client.id,
                user_id=admin_user.id,
                total_amount=Decimal("100.00"),
                payment_method_id=cash_method.id,
                created_by_user_id=admin_user.id,
            )
            session.add(sale)
            session.commit()

            # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –≤–∏–º—ñ—Ä—é—î–º–æ –ø–∞–º'—è—Ç—å
            if i % 50 == 0:
                current_memory = process.memory_info().rss / 1024 / 1024  # MB
                memory_measurements.append(current_memory)
                print(f"–û–ø–µ—Ä–∞—Ü—ñ—è {i}: {current_memory:.1f} MB")

            # –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
            if i % 20 == 0:
                session.expunge_all()
                gc.collect()

        # –§—ñ–Ω–∞–ª—å–Ω–µ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_measurements.append(final_memory)

        # –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
        memory_growth = final_memory - initial_memory
        max_memory = max(memory_measurements)

        print(f"üîß –§—ñ–Ω–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {final_memory:.1f} MB")
        print(f"üìä –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {memory_growth:.1f} MB")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {max_memory:.1f} MB")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –≤–∏—Ç–æ–∫–∏ –ø–∞–º'—è—Ç—ñ
        # –î–æ–ø—É—Å–∫–∞—î–º–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –¥–æ 50MB (—Ä–æ–∑—É–º–Ω–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è —Ç–∞–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π)
        assert memory_growth < 50.0, f"–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ –≤–∏—Ç—ñ–∫ –ø–∞–º'—è—Ç—ñ: –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è {memory_growth:.1f} MB"
        assert max_memory < initial_memory + 100.0, f"–ó–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {max_memory:.1f} MB"


class TestCriticalOperationsProfiling:
    """
    –ö—Ä–æ–∫–∏ 5.1.4: –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

    –í–∏–º—ñ—Ä—é—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —Å–∏—Å—Ç–µ–º–∏
    """

    def test_sale_creation_performance(self, app, session, admin_user, test_client, test_product, payment_methods):
        """
        –ö—Ä–æ–∫ 5.1.4a: –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
        """
        print("\nüß™ –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –ú–Ω–æ–∂–∏–Ω–Ω—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        execution_times = []
        iterations = 50

        for i in range(iterations):
            start_time = time.time()

            # –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
            sale = Sale(
                sale_date=datetime.now(),
                client_id=test_client.id,
                user_id=admin_user.id,
                total_amount=Decimal(f"{100 + i}.00"),
                payment_method_id=cash_method.id,
                created_by_user_id=admin_user.id,
            )
            session.add(sale)
            session.commit()

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
            sale_item = SaleItem(
                sale_id=sale.id,
                product_id=test_product.id,
                quantity=1,
                price_per_unit=sale.total_amount,
                cost_price_per_unit=sale.total_amount / Decimal("2"),
            )
            session.add(sale_item)
            session.commit()

            end_time = time.time()
            execution_times.append(end_time - start_time)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        avg_time = sum(execution_times) / len(execution_times)
        min_time = min(execution_times)
        max_time = max(execution_times)

        print(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É:")
        print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time*1000:.2f} –º—Å")
        print(f"   –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π: {min_time*1000:.2f} –º—Å")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π: {max_time*1000:.2f} –º—Å")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        assert avg_time < 0.5, f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É {avg_time:.3f}—Å (–º–∞–∫—Å–∏–º—É–º 0.5—Å)"
        assert max_time < 1.0, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É {max_time:.3f}—Å (–º–∞–∫—Å–∏–º—É–º 1—Å)"

    def test_complex_query_performance(self, app, session, admin_user, regular_user):
        """
        –ö—Ä–æ–∫ 5.1.4b: –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        """
        print("\nüß™ –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...")

        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤
        queries_to_profile = [
            {
                "name": "–ü—Ä–æ–¥–∞–∂—ñ –∑ JOIN",
                "query": lambda: session.query(Sale).join(SaleItem).join(Product).all(),
                "max_time": 1.0,
            },
            {
                "name": "–ó–∞–ø–∏—Å–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é",
                "query": lambda: Appointment.query.filter(
                    Appointment.date >= date.today() - timedelta(days=30), Appointment.status == "completed"
                ).all(),
                "max_time": 0.5,
            },
            {
                "name": "–ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤",
                "query": lambda: session.query(db.func.sum(Sale.total_amount))
                .filter(Sale.sale_date >= datetime.now() - timedelta(days=7))
                .scalar(),
                "max_time": 0.3,
            },
            {
                "name": "–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –º–∞–π—Å—Ç—Ä–∞",
                "query": lambda: Appointment.query.filter_by(master_id=regular_user.id).count(),
                "max_time": 0.2,
            },
        ]

        for query_info in queries_to_profile:
            times = []
            iterations = 10

            for _ in range(iterations):
                start_time = time.time()
                result = query_info["query"]()
                end_time = time.time()
                times.append(end_time - start_time)

            avg_time = sum(times) / len(times)
            max_time = max(times)

            print(f"üìä {query_info['name']}:")
            print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time*1000:.2f} –º—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π: {max_time*1000:.2f} –º—Å")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            max_time_value = query_info.get("max_time", 1.0)
            if isinstance(max_time_value, (int, float)):
                expected_time = float(max_time_value)
            else:
                expected_time = 1.0
            assert (
                avg_time < expected_time
            ), f"–ó–∞–ø–∏—Ç '{query_info['name']}' –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è {avg_time:.3f}—Å (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å < {expected_time}—Å)"


class TestLargeReportsProcessing:
    """
    –ö—Ä–æ–∫–∏ 5.2.1: –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –≤–µ–ª–∏–∫–∏—Ö –æ–±—Å—è–≥—ñ–≤ –¥–∞–Ω–∏—Ö –≤ –∑–≤—ñ—Ç–∞—Ö

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–ª—è—î –≤–µ–ª–∏–∫—ñ –∑–≤—ñ—Ç–∏
    """

    def test_large_financial_report_generation(
        self, app, session, admin_user, test_client, test_product, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.1a: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–µ–ª–∏–∫–æ–≥–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É

        –¢–µ—Å—Ç—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–≤—ñ—Ç—É –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–µ–ª–∏–∫–æ–≥–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (—è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î)
        existing_sales_count = Sale.query.count()
        target_sales_count = 2000

        if existing_sales_count < target_sales_count:
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö {target_sales_count - existing_sales_count} –ø—Ä–æ–¥–∞–∂—ñ–≤...")

            batch_size = 100
            for batch_start in range(existing_sales_count, target_sales_count, batch_size):
                batch_end = min(batch_start + batch_size, target_sales_count)

                for i in range(batch_start, batch_end):
                    sale = Sale(
                        sale_date=datetime.now() - timedelta(days=i % 365),  # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ —Ä–æ—Ü—ñ
                        client_id=test_client.id,
                        user_id=admin_user.id,
                        total_amount=Decimal(f"{50 + (i % 1000)}.00"),
                        payment_method_id=cash_method.id,
                        created_by_user_id=admin_user.id,
                    )
                    session.add(sale)

                session.commit()

        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–≤—ñ—Ç—ñ–≤
        report_scenarios = [
            {"name": "–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤)", "date_range": 30, "expected_max_time": 5.0},
            {"name": "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ 90 –¥–Ω—ñ–≤)", "date_range": 90, "expected_max_time": 10.0},
            {"name": "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ 365 –¥–Ω—ñ–≤)", "date_range": 365, "expected_max_time": 20.0},
        ]

        for scenario in report_scenarios:
            print(f"\nüìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è: {scenario['name']}")

            start_date = datetime.now() - timedelta(days=int(scenario["date_range"]))
            end_date = datetime.now()

            start_time = time.time()

            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∑–≤—ñ—Ç –∑ –∞–≥—Ä–µ–≥–∞—Ü—ñ—î—é
            sales_query = Sale.query.filter(Sale.sale_date >= start_date, Sale.sale_date <= end_date)
            sales_list = sales_query.all()

            total_amount_result = (
                session.query(db.func.sum(Sale.total_amount))
                .filter(Sale.sale_date >= start_date, Sale.sale_date <= end_date)
                .scalar()
            )

            sales_count = sales_query.count()

            daily_breakdown = (
                session.query(
                    db.func.date(Sale.sale_date).label("date"),
                    db.func.sum(Sale.total_amount).label("total"),
                    db.func.count(Sale.id).label("count"),
                )
                .filter(Sale.sale_date >= start_date, Sale.sale_date <= end_date)
                .group_by(db.func.date(Sale.sale_date))
                .all()
            )

            report_data = {
                "sales": sales_list,
                "total_amount": total_amount_result or Decimal("0"),
                "sales_count": sales_count,
                "daily_breakdown": daily_breakdown,
            }

            end_time = time.time()
            generation_time = end_time - start_time

            print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.2f}—Å:")
            print(f"   - –ü—Ä–æ–¥–∞–∂—ñ–≤: {len(sales_list)}")
            print(f"   - –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {report_data['total_amount']}")
            print(f"   - –î–µ–Ω–Ω–∞ —Ä–æ–∑–±–∏–≤–∫–∞: {len(daily_breakdown)} –¥–Ω—ñ–≤")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            expected_time = float(scenario["expected_max_time"])
            assert (
                generation_time < expected_time
            ), f"–ó–≤—ñ—Ç '{scenario['name']}' –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è {generation_time:.2f}—Å (–º–∞–∫—Å–∏–º—É–º {expected_time}—Å)"

    def test_large_salary_report_with_aggregation(
        self, app, session, admin_user, regular_user, test_client, test_service, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.1b: –ó–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –∑–≤—ñ—Ç –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
        appointments_count = 1000
        existing_appointments = Appointment.query.count()

        if existing_appointments < appointments_count:
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è {appointments_count - existing_appointments} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤...")

            for i in range(existing_appointments, appointments_count):
                appointment = Appointment(
                    client_id=test_client.id,
                    master_id=regular_user.id,
                    date=date.today() - timedelta(days=i % 60),
                    start_time=dt_time(9 + (i % 8), 0),
                    end_time=dt_time(10 + (i % 8), 0),
                    status="completed",
                    payment_status="paid",
                    amount_paid=Decimal(f"{200 + (i % 300)}.00"),
                    payment_method_id=cash_method.id,
                )
                session.add(appointment)

                # –î–æ–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥—É
                appointment_service = AppointmentService(
                    appointment_id=appointment.id, service_id=test_service.id, price=float(appointment.amount_paid)
                )
                session.add(appointment_service)

                if i % 100 == 0:
                    session.commit()

            session.commit()

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
        start_time = time.time()

        report_start_date = date.today() - timedelta(days=30)
        report_end_date = date.today()

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∑–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –∑–≤—ñ—Ç
        salary_report = {
            "master_stats": session.query(
                User.id,
                User.full_name,
                db.func.count(Appointment.id).label("appointments_count"),
                db.func.sum(Appointment.amount_paid).label("total_revenue"),
                db.func.avg(Appointment.amount_paid).label("avg_amount"),
            )
            .join(Appointment, User.id == Appointment.master_id)
            .filter(
                Appointment.date >= report_start_date,
                Appointment.date <= report_end_date,
                Appointment.status == "completed",
            )
            .group_by(User.id, User.full_name)
            .all(),
            "daily_stats": session.query(
                Appointment.date,
                db.func.count(Appointment.id).label("count"),
                db.func.sum(Appointment.amount_paid).label("total"),
            )
            .filter(
                Appointment.date >= report_start_date,
                Appointment.date <= report_end_date,
                Appointment.status == "completed",
            )
            .group_by(Appointment.date)
            .all(),
            "commission_calculations": [],
        }

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–º—ñ—Å—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞
        for master_stat in salary_report["master_stats"]:
            commission_rate = Decimal("15.0")  # 15% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∫–æ–º—ñ—Å—ñ—è
            commission_amount = master_stat.total_revenue * (commission_rate / Decimal("100"))

            salary_report["commission_calculations"].append(
                {
                    "master_id": master_stat.id,
                    "master_name": master_stat.full_name,
                    "total_revenue": master_stat.total_revenue,
                    "commission_rate": commission_rate,
                    "commission_amount": commission_amount,
                }
            )

        end_time = time.time()
        generation_time = end_time - start_time

        print(f"‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –∑–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ {generation_time:.2f}—Å:")
        print(f"   - –ú–∞–π—Å—Ç—Ä—ñ–≤: {len(salary_report['master_stats'])}")
        print(f"   - –î–Ω—ñ–≤: {len(salary_report['daily_stats'])}")
        print(f"   - –†–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –∫–æ–º—ñ—Å—ñ–π: {len(salary_report['commission_calculations'])}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        assert generation_time < 15.0, f"–ó–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –∑–≤—ñ—Ç –≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è {generation_time:.2f}—Å (–º–∞–∫—Å–∏–º—É–º 15—Å)"
        assert len(salary_report["master_stats"]) > 0, "–ó–≤—ñ—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º–∞–π—Å—Ç—Ä—ñ–≤"


class TestDatabaseOptimization:
    """
    –ö—Ä–æ–∫–∏ 5.2.2: –¢–µ—Å—Ç –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

    –ê–Ω–∞–ª—ñ–∑—É—î —Ç–∞ —Ç–µ—Å—Ç—É—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
    """

    def test_query_execution_plans(self, app, session):
        """
        –ö—Ä–æ–∫ 5.2.2a: –ê–Ω–∞–ª—ñ–∑ –ø–ª–∞–Ω—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
        """
        print("\nüß™ –ê–Ω–∞–ª—ñ–∑ –ø–ª–∞–Ω—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤...")

        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        test_queries = [
            {"name": "–ü—Ä–æ—Å—Ç–∏–π SELECT", "query": "SELECT * FROM sale LIMIT 100", "expected_time": 0.1},
            {
                "name": "JOIN –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é",
                "query": """
                    SELECT s.*, si.quantity, p.name 
                    FROM sale s 
                    JOIN sale_item si ON s.id = si.sale_id 
                    JOIN product p ON si.product_id = p.id 
                    WHERE s.sale_date >= date('now', '-30 days')
                """,
                "expected_time": 0.5,
            },
            {
                "name": "–ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∑ GROUP BY",
                "query": """
                    SELECT DATE(sale_date) as day, 
                           COUNT(*) as sales_count, 
                           SUM(total_amount) as daily_total
                    FROM sale 
                    WHERE sale_date >= date('now', '-30 days')
                    GROUP BY DATE(sale_date)
                    ORDER BY day
                """,
                "expected_time": 0.3,
            },
            {
                "name": "–°–∫–ª–∞–¥–Ω–∏–π JOIN –∑ –∞–≥—Ä–µ–≥–∞—Ü—ñ—î—é",
                "query": """
                    SELECT u.full_name, 
                           COUNT(a.id) as appointments, 
                           AVG(a.amount_paid) as avg_amount
                    FROM user u
                    LEFT JOIN appointment a ON u.id = a.master_id
                    WHERE a.date >= date('now', '-30 days')
                    GROUP BY u.id, u.full_name
                """,
                "expected_time": 0.8,
            },
        ]

        for query_info in test_queries:
            print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {query_info['name']}")

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è–º —á–∞—Å—É
            times = []
            iterations = 5

            for _ in range(iterations):
                start_time = time.time()
                result = session.execute(db.text(query_info["query"]))
                rows = result.fetchall()
                end_time = time.time()
                times.append(end_time - start_time)

            avg_time = sum(times) / len(times)
            min_time = min(times)
            max_time = max(times)

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(rows)}")
            print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {avg_time*1000:.2f} –º—Å")
            print(f"   –ú—ñ–Ω/–ú–∞–∫—Å: {min_time*1000:.2f}/{max_time*1000:.2f} –º—Å")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            expected_time = float(query_info["expected_time"])
            assert (
                avg_time < expected_time
            ), f"–ó–∞–ø–∏—Ç '{query_info['name']}' –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è {avg_time:.3f}—Å (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å < {expected_time}—Å)"

    def test_index_effectiveness(self, app, session):
        """
        –ö—Ä–æ–∫ 5.2.2b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤...")

        # –ó–∞–ø–∏—Ç–∏, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
        indexed_queries = [
            {
                "name": "–ü–æ—à—É–∫ –ø–æ –¥–∞—Ç—ñ –ø—Ä–æ–¥–∞–∂—É",
                "query": "SELECT COUNT(*) FROM sale WHERE sale_date >= date('now', '-7 days')",
                "expected_time": 0.1,
            },
            {
                "name": "–ü–æ—à—É–∫ –ø–æ ID –∫–ª—ñ—î–Ω—Ç–∞",
                "query": "SELECT COUNT(*) FROM sale WHERE client_id = 1",
                "expected_time": 0.05,
            },
            {
                "name": "–ü–æ—à—É–∫ –ø–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                "query": "SELECT COUNT(*) FROM sale WHERE user_id = 1",
                "expected_time": 0.05,
            },
            {
                "name": "–ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ –ø–æ –º–∞–π—Å—Ç—Ä—É",
                "query": "SELECT COUNT(*) FROM appointment WHERE master_id = 1",
                "expected_time": 0.05,
            },
        ]

        for query_info in indexed_queries:
            start_time = time.time()
            result = session.execute(db.text(query_info["query"]))
            count = result.scalar()
            end_time = time.time()

            execution_time = end_time - start_time

            print(f"üìä {query_info['name']}: {count} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {execution_time*1000:.2f} –º—Å")

            # –Ü–Ω–¥–µ–∫—Å–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –¥—É–∂–µ —à–≤–∏–¥–∫–æ
            expected_time = float(query_info["expected_time"])
            assert (
                execution_time < expected_time
            ), f"–Ü–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç '{query_info['name']}' –∑–∞–π–Ω—è–≤ {execution_time:.3f}—Å (–º–∞–∫—Å–∏–º—É–º {expected_time}—Å)"


class TestMemoryMonitoring:
    """
    –ö—Ä–æ–∫–∏ 5.2.3: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ

    –í—ñ–¥—Å—Ç–µ–∂—É—î —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å —Ä—ñ–∑–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    """

    def test_memory_usage_during_bulk_operations(
        self, app, session, admin_user, test_client, test_product, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.3a: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å –º–∞—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        """
        print("\nüß™ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å –º–∞—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])
        process = psutil.Process(os.getpid())

        # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        print(f"üîß –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–∞–º'—è—Ç—å: {initial_memory:.1f} MB")

        memory_log = [("Start", initial_memory)]

        # –û–ø–µ—Ä–∞—Ü—ñ—è 1: –ú–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
        print("üìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è 500 –ø—Ä–æ–¥–∞–∂—ñ–≤...")
        for i in range(500):
            sale = Sale(
                sale_date=datetime.now(),
                client_id=test_client.id,
                user_id=admin_user.id,
                total_amount=Decimal(f"{100 + i}.00"),
                payment_method_id=cash_method.id,
                created_by_user_id=admin_user.id,
            )
            session.add(sale)

            if i % 100 == 0:
                session.commit()
                current_memory = process.memory_info().rss / 1024 / 1024
                memory_log.append((f"After {i} sales", current_memory))
                print(f"   {i} –ø—Ä–æ–¥–∞–∂—ñ–≤: {current_memory:.1f} MB")

        session.commit()
        after_creation_memory = process.memory_info().rss / 1024 / 1024
        memory_log.append(("After creation", after_creation_memory))

        # –û–ø–µ—Ä–∞—Ü—ñ—è 2: –°–∫–ª–∞–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏
        print("üìä –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...")
        for i in range(10):
            sales = Sale.query.join(SaleItem).join(Product).limit(100).all()
            current_memory = process.memory_info().rss / 1024 / 1024

            if i == 0 or i == 9:
                memory_log.append((f"Query {i+1}", current_memory))

        # –û–ø–µ—Ä–∞—Ü—ñ—è 3: –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        print("üßπ –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó...")
        session.expunge_all()
        gc.collect()

        after_cleanup_memory = process.memory_info().rss / 1024 / 1024
        memory_log.append(("After cleanup", after_cleanup_memory))

        # –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
        print(f"\nüìä –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ:")
        for label, memory in memory_log:
            growth = memory - initial_memory
            print(f"   {label}: {memory:.1f} MB (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è: {growth:+.1f} MB)")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        max_memory = max(memory for _, memory in memory_log)
        final_memory = memory_log[-1][1]

        memory_growth = max_memory - initial_memory
        memory_recovery = max_memory - final_memory

        assert memory_growth < 200.0, f"–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {memory_growth:.1f} MB"
        assert memory_recovery > 0, f"–ü–∞–º'—è—Ç—å –Ω–µ –∑–≤—ñ–ª—å–Ω–∏–ª–∞—Å—è –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è: {memory_recovery:.1f} MB"

    def test_session_management_memory_impact(
        self, app, session, admin_user, test_client, test_product, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.3b: –í–ø–ª–∏–≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—î—é –Ω–∞ –ø–∞–º'—è—Ç—å
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–ø–ª–∏–≤—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—î—é –Ω–∞ –ø–∞–º'—è—Ç—å...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])
        process = psutil.Process(os.getpid())

        initial_memory = process.memory_info().rss / 1024 / 1024

        # –¢–µ—Å—Ç 1: –ë–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (–Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤)
        print("üìà –¢–µ—Å—Ç –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó...")
        for i in range(200):
            sale = Sale(
                sale_date=datetime.now(),
                client_id=test_client.id,
                user_id=admin_user.id,
                total_amount=Decimal("100.00"),
                payment_method_id=cash_method.id,
                created_by_user_id=admin_user.id,
            )
            session.add(sale)
            session.commit()

        without_cleanup_memory = process.memory_info().rss / 1024 / 1024

        # –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
        session.expunge_all()
        gc.collect()

        # –¢–µ—Å—Ç 2: –ó —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º —Å–µ—Å—ñ—ó
        print("üßπ –¢–µ—Å—Ç –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º —Å–µ—Å—ñ—ó...")
        for i in range(200):
            sale = Sale(
                sale_date=datetime.now(),
                client_id=test_client.id,
                user_id=admin_user.id,
                total_amount=Decimal("100.00"),
                payment_method_id=cash_method.id,
                created_by_user_id=admin_user.id,
            )
            session.add(sale)
            session.commit()

            # –û—á–∏—â–∞—î–º–æ –∫–æ–∂–Ω—ñ 20 –æ–ø–µ—Ä–∞—Ü—ñ–π
            if i % 20 == 0:
                session.expunge_all()
                gc.collect()

        with_cleanup_memory = process.memory_info().rss / 1024 / 1024

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        growth_without_cleanup = without_cleanup_memory - initial_memory
        growth_with_cleanup = with_cleanup_memory - initial_memory
        memory_saved = growth_without_cleanup - growth_with_cleanup

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—î—é:")
        print(f"   –ë–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è: +{growth_without_cleanup:.1f} MB")
        print(f"   –ó –æ—á–∏—â–µ–Ω–Ω—è–º: +{growth_with_cleanup:.1f} MB")
        print(f"   –ó–∞–æ—â–∞–¥–∂–µ–Ω–æ: {memory_saved:.1f} MB")

        # –†–µ–≥—É–ª—è—Ä–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –µ–∫–æ–Ω–æ–º–∏—Ç–∏ –ø–∞–º'—è—Ç—å
        assert memory_saved > 0, f"–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –Ω–µ –∑–∞–æ—â–∞–¥–∏–ª–æ –ø–∞–º'—è—Ç—å: {memory_saved:.1f} MB"


class TestCrashRecovery:
    """
    –ö—Ä–æ–∫–∏ 5.2.4: –¢–µ—Å—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–±–æ—ó–≤

    –¢–µ—Å—Ç—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö –∑–±–æ—ó–≤
    """

    def test_database_connection_recovery(self, app, session):
        """
        –ö—Ä–æ–∫ 5.2.4a: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î...")

        # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
        sales_count_before = Sale.query.count()
        print(f"üìä –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤: {sales_count_before}")

        # –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ–±–ª–µ–º –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ –Ω–µ –≤–¥–∞—Ç–∏—Å—è
            test_query = session.query(Sale).filter(Sale.sale_date >= datetime.now() - timedelta(days=1))

            result = test_query.all()
            print(f"‚úÖ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {len(result)} –∑–∞–ø–∏—Å—ñ–≤")

            # –¢–µ—Å—Ç—É—î–º–æ rollback –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏
            session.begin()
            try:
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
                session.execute(db.text("SELECT * FROM non_existent_table"))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)[:50]}...")
                session.rollback()
                print("‚úÖ Rollback –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—î
            sales_count_after = Sale.query.count()
            assert sales_count_after == sales_count_before, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –∑–º—ñ–Ω–∏–ª–∞—Å—è –ø—ñ—Å–ª—è rollback"

            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–≤ –±–∏ –º–µ—Ö–∞–Ω—ñ–∑–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            assert False, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}"

    def test_transaction_integrity_under_stress(
        self, app, session, admin_user, test_client, test_product, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.4b: –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        successful_transactions = 0
        failed_transactions = 0

        # –°–∏–º—É–ª—é—î–º–æ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –º–æ–∂–ª–∏–≤–∏–º–∏ –∑–±–æ—è–º–∏
        for i in range(100):
            try:
                # –ü–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                session.begin()

                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–¥–∞–∂
                sale = Sale(
                    sale_date=datetime.now(),
                    client_id=test_client.id,
                    user_id=admin_user.id,
                    total_amount=Decimal(f"{100 + i}.00"),
                    payment_method_id=cash_method.id,
                    created_by_user_id=admin_user.id,
                )
                session.add(sale)
                session.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –±–µ–∑ commit

                # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä –¥–æ –ø—Ä–æ–¥–∞–∂—É
                sale_item = SaleItem(
                    sale_id=sale.id,
                    product_id=test_product.id,
                    quantity=1,
                    price_per_unit=sale.total_amount,
                    cost_price_per_unit=sale.total_amount / Decimal("2"),
                )
                session.add(sale_item)

                # –°–∏–º—É–ª—é—î–º–æ –º–æ–∂–ª–∏–≤–∏–π –∑–±—ñ–π (–∫–æ–∂–Ω–∞ 10-—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è)
                if i % 10 == 9:
                    # –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
                    raise Exception(f"–°–∏–º—É–ª—å–æ–≤–∞–Ω–∏–π –∑–±—ñ–π –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó {i}")

                # –Ø–∫—â–æ –≤—Å–µ OK, –∫–æ–º—ñ—Ç–∏–º–æ
                session.commit()
                successful_transactions += 1

                if i % 20 == 0:
                    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i}: ‚úÖ –£—Å–ø—ñ—à–Ω–æ")

            except Exception as e:
                # Rollback –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                session.rollback()
                failed_transactions += 1

                if "–°–∏–º—É–ª—å–æ–≤–∞–Ω–∏–π –∑–±—ñ–π" in str(e):
                    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i}: ‚ö†Ô∏è –°–∏–º—É–ª—å–æ–≤–∞–Ω–∏–π –∑–±—ñ–π")
                else:
                    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {i}: ‚ùå –†–µ–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - {e}")

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        total_transactions = successful_transactions + failed_transactions
        success_rate = successful_transactions / total_transactions if total_transactions > 0 else 0

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:")
        print(f"   –£—Å–ø—ñ—à–Ω–∏—Ö: {successful_transactions}")
        print(f"   –ù–µ—É—Å–ø—ñ—à–Ω–∏—Ö: {failed_transactions}")
        print(f"   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1%}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        assert success_rate >= 0.85, f"–ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {success_rate:.1%}"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —É—Å–ø—ñ—à–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥—ñ–π—Å–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∏—Å—è
        recent_sales = Sale.query.filter(Sale.sale_date >= datetime.now() - timedelta(minutes=5)).count()

        # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —â–æ –º–æ–≥–ª–∏ –±—É—Ç–∏ —â–µ –ø—Ä–æ–¥–∞–∂—ñ –∑ —ñ–Ω—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
        assert (
            recent_sales >= successful_transactions
        ), f"–ù–µ –≤—Å—ñ —É—Å–ø—ñ—à–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–≥–ª–∏—Å—è: {recent_sales} < {successful_transactions}"

        print("‚úÖ –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")

    def test_data_consistency_after_interruption(
        self, app, session, admin_user, test_client, test_product, payment_methods
    ):
        """
        –ö—Ä–æ–∫ 5.2.4c: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
        """
        print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è...")

        cash_method = next((pm for pm in payment_methods if pm.name == "–ì–æ—Ç—ñ–≤–∫–∞"), payment_methods[0])

        # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        initial_sales_count = Sale.query.count()
        initial_items_count = SaleItem.query.count()

        print(f"üìä –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω: {initial_sales_count} –ø—Ä–æ–¥–∞–∂—ñ–≤, {initial_items_count} —Ç–æ–≤–∞—Ä—ñ–≤")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è–º
        interrupted_operations = 0
        completed_operations = 0

        for i in range(20):
            try:
                # –°–∫–ª–∞–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –∑ –∫—ñ–ª—å–∫–æ–º–∞ –∫—Ä–æ–∫–∞–º–∏
                sale = Sale(
                    sale_date=datetime.now(),
                    client_id=test_client.id,
                    user_id=admin_user.id,
                    total_amount=Decimal(f"{200 + i}.00"),
                    payment_method_id=cash_method.id,
                    created_by_user_id=admin_user.id,
                )
                session.add(sale)
                session.commit()

                # –ü–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
                item1 = SaleItem(
                    sale_id=sale.id,
                    product_id=test_product.id,
                    quantity=1,
                    price_per_unit=Decimal("100.00"),
                    cost_price_per_unit=Decimal("50.00"),
                )
                session.add(item1)
                session.commit()

                # –°–∏–º—É–ª—é—î–º–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –Ω–∞ –¥—Ä—É–≥–æ–º—É —Ç–æ–≤–∞—Ä—ñ
                if i % 5 == 4:
                    # –ß–∞—Å—Ç–∫–æ–≤–æ –¥–æ–¥–∞—î–º–æ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ
                    item2 = SaleItem(
                        sale_id=sale.id,
                        product_id=test_product.id,
                        quantity=2,
                        price_per_unit=Decimal("50.00"),
                        cost_price_per_unit=Decimal("25.00"),
                    )
                    session.add(item2)
                    # –ù–ï –∫–æ–º—ñ—Ç–∏–º–æ - —Å–∏–º—É–ª—é—î–º–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
                    session.rollback()
                    interrupted_operations += 1
                    print(f"–û–ø–µ—Ä–∞—Ü—ñ—è {i}: ‚ö†Ô∏è –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ")
                else:
                    # –ó–∞–≤–µ—Ä—à—É—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    item2 = SaleItem(
                        sale_id=sale.id,
                        product_id=test_product.id,
                        quantity=2,
                        price_per_unit=Decimal("50.00"),
                        cost_price_per_unit=Decimal("25.00"),
                    )
                    session.add(item2)
                    session.commit()
                    completed_operations += 1

                    if i % 5 == 0:
                        print(f"–û–ø–µ—Ä–∞—Ü—ñ—è {i}: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

            except Exception as e:
                session.rollback()
                interrupted_operations += 1
                print(f"–û–ø–µ—Ä–∞—Ü—ñ—è {i}: ‚ùå –ü–æ–º–∏–ª–∫–∞ - {e}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π
        final_sales_count = Sale.query.count()
        final_items_count = SaleItem.query.count()

        # –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        expected_sales = initial_sales_count + completed_operations
        # –ö–æ–∂–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ 2 —Ç–æ–≤–∞—Ä–∏
        expected_items = initial_items_count + (completed_operations * 2)

        print(f"\nüìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:")
        print(f"   –ü—Ä–æ–¥–∞–∂—ñ–≤: {final_sales_count} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected_sales})")
        print(f"   –¢–æ–≤–∞—Ä—ñ–≤: {final_items_count} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected_items})")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π: {completed_operations}")
        print(f"   –ü–µ—Ä–µ—Ä–≤–∞–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π: {interrupted_operations}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        assert final_sales_count >= expected_sales, f"–í—Ç—Ä–∞—á–µ–Ω–æ –ø—Ä–æ–¥–∞–∂—ñ: {final_sales_count} < {expected_sales}"

        # –î–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ —Ç–µ—Å—Ç–∏
        assert (
            abs(final_items_count - expected_items) <= 5
        ), f"–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—é —Ç–æ–≤–∞—Ä—ñ–≤: {final_items_count} vs {expected_items}"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–µ–º–∞—î "—Å–∏—Ä—ñ—Ç—Å—å–∫–∏—Ö" —Ç–æ–≤–∞—Ä—ñ–≤ (—Ç–æ–≤–∞—Ä–∏ –±–µ–∑ –ø—Ä–æ–¥–∞–∂—É)
        orphaned_items = session.query(SaleItem).filter(~SaleItem.sale_id.in_(session.query(Sale.id))).count()

        assert orphaned_items == 0, f"–ó–Ω–∞–π–¥–µ–Ω–æ {orphaned_items} —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –ø—Ä–æ–¥–∞–∂—É"

        print("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")


# –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
pytest.mark.slow = pytest.mark.filterwarnings("ignore::DeprecationWarning")
