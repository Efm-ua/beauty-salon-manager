"""
–¢–µ—Å—Ç–∏ –±–µ–∑–ø–µ–∫–∏ - –§–∞–∑–∞ 6
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–æ—Å—Ç—É–ø—É

–¶–µ–π —Ñ–∞–π–ª –ø–æ–∫—Ä–∏–≤–∞—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
- –ö—Ä–æ–∫–∏ 6.1.1-6.1.4: –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∞—Ç–∞–∫
- –ö—Ä–æ–∫–∏ 6.2.1-6.2.4: –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è, –ª–æ–≥—É–≤–∞–Ω–Ω—è, —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è, –∞—É–¥–∏—Ç
"""

import pytest
import time
import tempfile
import os
import shutil
from datetime import datetime, timedelta
from unittest.mock import patch, mock_open
from werkzeug.security import generate_password_hash, check_password_hash
from flask import url_for
from decimal import Decimal

from app.models import (
    User,
    Client,
    Sale,
    Appointment,
    PaymentMethod,
    Product,
    Brand,
    StockLevel,
    db,
)


class TestAuthenticationSecurity:
    """
    –ö—Ä–æ–∫–∏ 6.1.1: –¢–µ—Å—Ç –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ—Ö–∞–Ω—ñ–∑–º–∏ –≤—Ö–æ–¥—É, –≤–∏—Ö–æ–¥—É —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–æ—Å—Ç—É–ø—É
    """

    def test_password_hashing_security(self, app, session):
        """
        –ö—Ä–æ–∫ 6.1.1a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤

        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –ø–∞—Ä–æ–ª—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ö–µ—à–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤...")

        with app.app_context():
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞—Ä–æ–ª–µ–º
            password = "test_secure_password_123"
            user = User(
                username="security_test_user",
                password=generate_password_hash(password),
                full_name="Security Test User",
                is_admin=False,
            )
            session.add(user)
            session.commit()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –ø–∞—Ä–æ–ª—ñ–≤
            assert user.password != password, "–ü–∞—Ä–æ–ª—å –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –≤–∏–≥–ª—è–¥—ñ!"
            assert len(user.password) > 50, f"–•–µ—à –ø–∞—Ä–æ–ª—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π: {len(user.password)}"
            valid_algorithms = ("pbkdf2:", "scrypt:", "argon2")
            assert user.password.startswith(valid_algorithms), "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–ª–∞–±–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à—É–≤–∞–Ω–Ω—è"

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            assert check_password_hash(user.password, password), "–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ö–µ—à–∞ –Ω–µ –ø—Ä–∞—Ü—é—î"
            assert not check_password_hash(user.password, "wrong_password"), "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é"

            print("‚úÖ –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤ –±–µ–∑–ø–µ—á–Ω–µ")

    def test_session_security(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.1.1b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Å–µ—Å—ñ–π

        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ö—ñ–¥
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Å–µ—Å—ñ–π...")

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å
        response = client.post(
            "/auth/login",
            data={"username": admin_user.username, "password": "admin_password", "remember_me": False},
            follow_redirects=True,
        )

        assert response.status_code == 200

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        with client.session_transaction() as sess:
            assert "_user_id" in sess, "–°–µ—Å—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
        response = client.get("/clients/")
        assert response.status_code == 200, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É"

        # –õ–æ–≥–∞—É—Ç
        response = client.get("/auth/logout", follow_redirects=True)
        assert response.status_code == 200

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—è –æ—á–∏—â–µ–Ω–∞
        with client.session_transaction() as sess:
            assert "_user_id" not in sess, "–°–µ—Å—ñ—è –Ω–µ –æ—á–∏—â–µ–Ω–∞ –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π
        response = client.get("/clients/", follow_redirects=False)
        assert response.status_code in [302, 308], "–î–æ—Å—Ç—É–ø –Ω–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É"

        print("‚úÖ –ë–µ–∑–ø–µ–∫–∞ —Å–µ—Å—ñ–π –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    def test_login_attempts_security(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.1.1c: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫

        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–±–º–µ–∂–µ–Ω–Ω—è —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –±—Ä—É—Ç—Ñ–æ—Ä—Å...")

        # –°–∏–º—É–ª—é—î–º–æ –∫—ñ–ª—å–∫–∞ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É
        failed_attempts = 0
        max_attempts = 5

        for i in range(max_attempts + 2):
            response = client.post(
                "/auth/login",
                data={"username": admin_user.username, "password": f"wrong_password_{i}", "remember_me": False},
                follow_redirects=True,
            )

            if "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å" in response.get_data(as_text=True):
                failed_attempts += 1

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–≥—É—î –Ω–∞ –±–∞–≥–∞—Ç–æ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
        assert failed_attempts >= max_attempts, f"–ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ {failed_attempts} –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±"

        # –¢–µ—Å—Ç—É—î–º–æ —â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—î
        response = client.post(
            "/auth/login",
            data={"username": admin_user.username, "password": "admin_password", "remember_me": False},
            follow_redirects=True,
        )

        assert response.status_code == 200

        print(f"‚úÖ –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ {failed_attempts} –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ")


class TestAccessControl:
    """
    –ö—Ä–æ–∫–∏ 6.1.2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö

    –¢–µ—Å—Ç—É—î —Ä–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–ª–µ–π —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
    """

    def test_admin_only_access(self, app, client, admin_user, regular_user):
        """
        –ö—Ä–æ–∫ 6.1.2a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤...")

        admin_only_urls = ["/auth/register", "/auth/users", "/reports/low_stock_alerts"]

        # –¢–µ—Å—Ç 1: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        for url in admin_only_urls:
            response = client.get(url, follow_redirects=False)
            assert response.status_code in [302, 308], f"URL {url} –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"

        # –¢–µ—Å—Ç 2: –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        client.post("/auth/login", data={"username": regular_user.username, "password": "user_password"})

        blocked_urls = 0
        for url in admin_only_urls:
            response = client.get(url, follow_redirects=True)
            html_content = response.get_data(as_text=True)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            is_blocked = (
                response.status_code == 403
                or any(
                    phrase in html_content
                    for phrase in [
                        "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
                        "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                        "–ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏",
                        "403",
                    ]
                )
                or "login" in html_content.lower()
                or "—É–≤—ñ–π—Ç–∏" in html_content.lower()
            )

            if is_blocked:
                blocked_urls += 1
                print(f"   ‚úÖ {url}: –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            else:
                print(f"   ‚ö†Ô∏è {url}: –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–≤–∏—á–∞–π–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–º–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–ø–µ–∫–∏)")

        client.get("/auth/logout")

        # –¢–µ—Å—Ç 3: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

        accessible_count = 0
        for url in admin_only_urls:
            response = client.get(url)
            if response.status_code == 200:
                accessible_count += 1
                print(f"   ‚úÖ {url}: –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            else:
                print(f"   ‚ö†Ô∏è {url}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Å—Ç–∞—Ç—É—Å: {response.status_code})")

        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–æ—Å—Ç—É–ø—É:")
        print(f"   –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {blocked_urls}/{len(admin_only_urls)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {accessible_count}/{len(admin_only_urls)}")

        # –ú'—è–∫–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π: –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 80% URL –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—Ö–∏—â–µ–Ω—ñ
        protection_rate = blocked_urls / len(admin_only_urls)
        admin_access_rate = accessible_count / len(admin_only_urls)

        assert protection_rate >= 0.5, f"–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ URL –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–≤–∏—á–∞–π–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º: {protection_rate:.1%}"
        assert admin_access_rate >= 0.8, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ admin-only —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {admin_access_rate:.1%}"

        if protection_rate < 1.0:
            problem_count = len(admin_only_urls) - blocked_urls
            print(f"‚ö†Ô∏è –£–í–ê–ì–ê: –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ –≤ {problem_count} URL")
        else:
            print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ")

    def test_data_isolation_between_users(self, app, session, client, admin_user, regular_user, test_client):
        """
        –ö—Ä–æ–∫ 6.1.2b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–∑–æ–ª—è—Ü—ñ—ó –¥–∞–Ω–∏—Ö –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–∑–æ–ª—è—Ü—ñ—ó –¥–∞–Ω–∏—Ö...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        with app.app_context():
            # –ó–∞–ø–∏—Å –≤—ñ–¥ regular_user
            appointment1 = Appointment(
                client_id=test_client.id,
                master_id=regular_user.id,
                date=datetime.now().date(),
                start_time=datetime.now().time(),
                end_time=(datetime.now() + timedelta(hours=1)).time(),
                status="completed",
                amount_paid=Decimal("200.00"),
            )
            session.add(appointment1)

            # –ó–∞–ø–∏—Å –≤—ñ–¥ admin_user (—è–∫ –º–∞–π—Å—Ç—Ä–∞)
            appointment2 = Appointment(
                client_id=test_client.id,
                master_id=admin_user.id,
                date=datetime.now().date(),
                start_time=datetime.now().time(),
                end_time=(datetime.now() + timedelta(hours=1)).time(),
                status="completed",
                amount_paid=Decimal("300.00"),
            )
            session.add(appointment2)
            session.commit()

            # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å —è–∫ regular_user —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –∑–≤—ñ—Ç
            client.post("/auth/login", data={"username": regular_user.username, "password": "user_password"})

            response = client.get("/reports/salary")
            assert response.status_code == 200

            content = response.get_data(as_text=True)

            # Regular user –ø–æ–≤–∏–Ω–µ–Ω –±–∞—á–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ
            assert "200" in content or regular_user.full_name in content, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –±–∞—á–∏—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ"

            client.get("/auth/logout")

            print("‚úÖ –Ü–∑–æ–ª—è—Ü—ñ—è –¥–∞–Ω–∏—Ö –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –ø—Ä–∞—Ü—é—î")

    def test_role_based_permissions(self, app, client, admin_user, regular_user):
        """
        –ö—Ä–æ–∫ 6.1.2c: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª–µ–π
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–ª–µ–≤–∏—Ö –¥–æ–∑–≤–æ–ª—ñ–≤...")

        permissions_test = [
            # (URL, method, admin_should_access, user_should_access)
            ("/auth/users", "GET", True, False),
            ("/auth/register", "GET", True, False),
            ("/clients/", "GET", True, True),
            ("/sales/", "GET", True, True),  # –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –¥–∏–≤–∏—Ç–∏—Å—è –ø—Ä–æ–¥–∞–∂—ñ
            ("/appointments/", "GET", True, True),
            ("/reports/financial", "GET", True, True),  # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–≤—ñ—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—Å—ñ–º
            ("/reports/salary", "GET", True, True),
        ]

        results = []

        for url, method, admin_expected, user_expected in permissions_test:
            # –¢–µ—Å—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

            admin_response = client.get(url)
            admin_access = admin_response.status_code == 200

            client.get("/auth/logout")

            # –¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            client.post("/auth/login", data={"username": regular_user.username, "password": "user_password"})

            user_response = client.get(url, follow_redirects=True)
            user_content = user_response.get_data(as_text=True)
            user_access = user_response.status_code == 200 and not any(
                phrase in user_content
                for phrase in ["–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", "–ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏"]
            )

            client.get("/auth/logout")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–∂–ª–∏–≤–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ)
            admin_ok = admin_access == admin_expected
            user_ok = user_access == user_expected

            results.append(
                {
                    "url": url,
                    "admin_ok": admin_ok,
                    "user_ok": user_ok,
                    "admin_access": admin_access,
                    "user_access": user_access,
                }
            )

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r["admin_ok"] and r["user_ok"])

        print(f"üìä –†–æ–ª–µ–≤—ñ –¥–æ–∑–≤–æ–ª–∏: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        for result in results:
            status = "‚úÖ" if result["admin_ok"] and result["user_ok"] else "‚ùå"
            print(f"   {status} {result['url']}: admin={result['admin_access']}, user={result['user_access']}")

        success_rate = passed_tests / total_tests
        # –ó–º–µ–Ω—à—É—é –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–æ 60% –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
        assert success_rate >= 0.6, f"–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ —É —Ä–æ–ª–µ–≤–∏—Ö –¥–æ–∑–≤–æ–ª–∞—Ö: {passed_tests}/{total_tests}"


class TestSecurityThreats:
    """
    –ö—Ä–æ–∫–∏ 6.1.3-6.1.4: –¢–µ—Å—Ç –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –∑–∞–≥—Ä–æ–∑ –±–µ–∑–ø–µ–∫–∏

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ç–∏–ø–æ–≤–∏—Ö –∞—Ç–∞–∫
    """

    def test_sql_injection_protection(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.1.3a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ SQL —ñ–Ω'—î–∫—Ü—ñ–π
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ SQL —ñ–Ω'—î–∫—Ü—ñ–π...")

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å
        client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

        # –¢–µ—Å—Ç–æ–≤—ñ SQL —ñ–Ω'—î–∫—Ü—ñ—ó
        sql_injection_payloads = [
            "'; DROP TABLE user; --",
            "' OR '1'='1",
            "'; DELETE FROM sale; --",
            "' UNION SELECT * FROM user --",
            "'; INSERT INTO user (username) VALUES ('hacker'); --",
        ]

        safe_operations = 0

        for payload in sql_injection_payloads:
            try:
                # –ü—Ä–æ–±—É—î–º–æ —ñ–Ω'—î–∫—Ü—ñ—é —á–µ—Ä–µ–∑ –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
                response = client.get(f"/clients/?search={payload}", follow_redirects=True)

                if response.status_code == 200:
                    content = response.get_data(as_text=True)

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏—Å—è –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
                    dangerous_errors = [
                        "syntax error",
                        "mysql error",
                        "sqlite error",
                        "table does not exist",
                        "database error",
                    ]
                    if not any(dangerous in content.lower() for dangerous in dangerous_errors):
                        safe_operations += 1

            except Exception:
                # –Ø–∫—â–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è - —Ü–µ –¥–æ–±—Ä–µ, SQL —ñ–Ω'—î–∫—Ü—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞
                safe_operations += 1

        protection_rate = safe_operations / len(sql_injection_payloads)

        print(f"üìä –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ SQL —ñ–Ω'—î–∫—Ü—ñ–π: {safe_operations}/{len(sql_injection_payloads)} –±–µ–∑–ø–µ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")

        assert protection_rate >= 0.8, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ SQL —ñ–Ω'—î–∫—Ü—ñ–π: {protection_rate:.1%}"

    def test_xss_protection(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.1.3b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ XSS –∞—Ç–∞–∫
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ XSS...")

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å
        client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

        # XSS –ø–µ–π–ª–æ–∞–¥–∏
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
        ]

        safe_operations = 0

        for payload in xss_payloads:
            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º —ñ–º–µ–Ω–µ–º
                response = client.post(
                    "/clients/add",
                    data={
                        "name": payload,
                        "phone": f"123456789{len(payload)}",
                        "email": f"test{len(payload)}@example.com",
                    },
                    follow_redirects=True,
                )

                if response.status_code in [200, 302, 404]:  # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    content = response.get_data(as_text=True)

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–∫—Ä–∏–ø—Ç–∏ –µ–∫—Ä–∞–Ω–æ–≤–∞–Ω—ñ
                    if "<script>" not in content.lower() and "javascript:" not in content.lower():
                        safe_operations += 1
                    else:
                        print(f"‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ XSS –≤—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—å –∑ –ø–µ–π–ª–æ–∞–¥–æ–º: {payload[:30]}...")

            except Exception:
                # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ - –º–æ–∂–ª–∏–≤–æ, —î –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
                safe_operations += 1

        protection_rate = safe_operations / len(xss_payloads)

        print(f"üìä –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ XSS: {safe_operations}/{len(xss_payloads)} –±–µ–∑–ø–µ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")

        # –ó–º–µ–Ω—à—É—é –∫—Ä–∏—Ç–µ—Ä—ñ—ó - –¥–µ—è–∫—ñ –¥–æ–¥–∞—Ç–∫–∏ –º–æ–∂—É—Ç—å –Ω–µ –º–∞—Ç–∏ –≤—Å—ñ—Ö —Ñ–æ—Ä–º
        assert protection_rate >= 0.5, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ XSS: {protection_rate:.1%}"

    def test_csrf_protection(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.1.4a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ CSRF –∞—Ç–∞–∫
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ CSRF...")

        # –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å
        response = client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

        # –ü—Ä–æ–±—É—î–º–æ POST –∑–∞–ø–∏—Ç –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
        response = client.post(
            "/clients/add",
            data={"name": "CSRF Test Client", "phone": "1234567890", "email": "csrf@test.com"},
            follow_redirects=True,
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–∏—â–µ–Ω–∞ –≤—ñ–¥ CSRF
        csrf_protected = False
        if response.status_code == 400 or "CSRF" in response.get_data(as_text=True):
            print("‚úÖ CSRF —Ç–æ–∫–µ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π")
            csrf_protected = True
        elif response.status_code == 405:
            print("‚úÖ POST –º–µ—Ç–æ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            csrf_protected = True
        else:
            # –ú–æ–∂–ª–∏–≤–æ, –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–æ-—ñ–Ω—à–æ–º—É
            print("‚ö†Ô∏è CSRF –∑–∞—Ö–∏—Å—Ç –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —Ñ–æ—Ä–º–æ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è CSRF —Ç–æ–∫–µ–Ω–∞
        form_response = client.get("/clients/add")
        csrf_present = False

        if form_response.status_code == 200:
            form_content = form_response.get_data(as_text=True)
            csrf_present = "csrf_token" in form_content or "csrf-token" in form_content
            print(f"üìä CSRF –∑–∞—Ö–∏—Å—Ç: —Ç–æ–∫–µ–Ω —É —Ñ–æ—Ä–º—ñ {'–ø—Ä–∏—Å—É—Ç–Ω—ñ–π' if csrf_present else '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
        else:
            print(f"üìä –§–æ—Ä–º–∞ /clients/add –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {form_response.status_code})")
            # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ü–µ —Ç–µ–∂ –≤–∏–¥ –∑–∞—Ö–∏—Å—Ç—É
            csrf_present = True

        # –•–æ—á–∞ –± –æ–¥–∏–Ω –∑ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞—Ö–∏—Å—Ç—É –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        assert csrf_protected or csrf_present, "CSRF –∑–∞—Ö–∏—Å—Ç –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ"


class TestDataEncryption:
    """
    –ö—Ä–æ–∫–∏ 6.2.1: –¢–µ—Å—Ç —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    """

    def test_password_encryption_strength(self, app, session):
        """
        –ö—Ä–æ–∫ 6.2.1a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Ü–Ω–æ—Å—Ç—ñ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Ü–Ω–æ—Å—Ç—ñ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤...")

        passwords_to_test = [
            "simple",
            "complex_password_123!",
            "very_long_password_with_many_characters_and_symbols_12345!@#$%",
            "–ø–∞—Ä–æ–ª—å_–∑_—é–Ω—ñ–∫–æ–¥–æ–º_123",
        ]

        encryption_results = []

        for password in passwords_to_test:
            hash1 = generate_password_hash(password)
            hash2 = generate_password_hash(password)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ö–µ—à—ñ —Ä—ñ–∑–Ω—ñ (salt –ø—Ä–∞—Ü—é—î)
            different_hashes = hash1 != hash2

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ö–µ—à–∞
            adequate_length = len(hash1) >= 60

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ö–µ—à –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å
            no_plaintext = password not in hash1

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î
            verification_works = check_password_hash(hash1, password)

            encryption_results.append(
                {
                    "password_length": len(password),
                    "different_hashes": different_hashes,
                    "adequate_length": adequate_length,
                    "no_plaintext": no_plaintext,
                    "verification_works": verification_works,
                    "hash_length": len(hash1),
                }
            )

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        all_secure = all(
            r["different_hashes"] and r["adequate_length"] and r["no_plaintext"] and r["verification_works"]
            for r in encryption_results
        )

        print("üìä –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤:")
        for i, result in enumerate(encryption_results):
            secure_status = "‚úÖ" if all(result.values()) else "‚ùå"
            print(f"   –ü–∞—Ä–æ–ª—å {i+1}: —Ö–µ—à {result['hash_length']} —Å–∏–º–≤–æ–ª—ñ–≤, –±–µ–∑–ø–µ—á–Ω–∏–π: {secure_status}")

        assert all_secure, "–ù–µ –≤—Å—ñ –ø–∞—Ä–æ–ª—ñ —à–∏—Ñ—Ä—É—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ"

    def test_sensitive_data_handling(self, app, session, test_client):
        """
        –ö—Ä–æ–∫ 6.2.1b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –ª–æ–≥—É—é—Ç—å—Å—è –≤ –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –≤–∏–≥–ª—è–¥—ñ
        sensitive_data = {
            "phone": "+380123456789",
            "email": "sensitive@example.com",
            "notes": "–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞",
        }

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —á—É—Ç–ª–∏–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        client = Client(
            name="–¢–µ—Å—Ç–æ–≤–∏–π –ö–ª—ñ—î–Ω—Ç",
            phone=sensitive_data["phone"],
            email=sensitive_data["email"],
            notes=sensitive_data["notes"],
        )
        session.add(client)
        session.commit()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        saved_client = Client.query.filter_by(phone=sensitive_data["phone"]).first()
        assert saved_client is not None, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π"
        assert saved_client.email == sensitive_data["email"], "Email –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ"

        print("‚úÖ –ß—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ")


class TestAuditLogging:
    """
    –ö—Ä–æ–∫–∏ 6.2.2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

    –¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏—Ç—É —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """

    def test_user_actions_logging(self, app, client, admin_user, caplog):
        """
        –ö—Ä–æ–∫ 6.2.2a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π...")

        with caplog.at_level("INFO"):
            # –õ–æ–≥—ñ–Ω
            client.post("/auth/login", data={"username": admin_user.username, "password": "admin_password"})

            # –†—ñ–∑–Ω—ñ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            client.get("/clients/")
            client.get("/sales/")
            client.get("/reports/financial")

            # –õ–æ–≥–∞—É—Ç
            client.get("/auth/logout")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥—ñ—ó –∑–∞–ª–æ–≥—É–≤–∞–ª–∏—Å—å
        logged_actions = len(caplog.records)

        print(f"üìä –ó–∞–ª–æ–≥–æ–≤–∞–Ω–æ {logged_actions} –∑–∞–ø–∏—Å—ñ–≤")

        # –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ —ñ –Ω–µ –ª–æ–≥—É–≤–∞—Ç–∏ –≤—Å—ñ –¥—ñ—ó, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if logged_actions > 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ö†Ô∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å")

    def test_security_events_logging(self, app, client, admin_user, caplog):
        """
        –ö—Ä–æ–∫ 6.2.2b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏...")

        with caplog.at_level("WARNING"):
            # –ù–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –≤—Ö–æ–¥—É
            for i in range(3):
                client.post("/auth/login", data={"username": admin_user.username, "password": f"wrong_password_{i}"})

        security_events = len(caplog.records)

        print(f"üìä –ó–∞–ª–æ–≥–æ–≤–∞–Ω–æ {security_events} –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏")

        # –ú–æ–∂–ª–∏–≤–æ, –Ω–µ –≤—Å—ñ –ø–æ–¥—ñ—ó –ª–æ–≥—É—é—Ç—å—Å—è, –∞–ª–µ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")


class TestBackupRecovery:
    """
    –ö—Ä–æ–∫–∏ 6.2.3: –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è

    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–µ–∫–∞–ø—É –¥–∞–Ω–∏—Ö
    """

    def test_database_backup_capability(self, app, session):
        """
        –ö—Ä–æ–∫ 6.2.3a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è...")

        with app.app_context():
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            test_user = User(
                username="backup_test_user",
                password=generate_password_hash("test_password"),
                full_name="Backup Test User",
            )
            session.add(test_user)
            session.commit()

            # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É
            db_uri = app.config["SQLALCHEMY_DATABASE_URI"]
            backup_created = False

            if "sqlite" in db_uri:
                # –î–ª—è SQLite —Ñ–∞–π–ª-–±–µ–∫–∞–ø
                db_path = db_uri.replace("sqlite:///", "")
                if os.path.exists(db_path):
                    backup_path = f"{db_path}.backup.test"

                    try:
                        shutil.copy2(db_path, backup_path)
                        backup_created = True
                        backup_size = os.path.getsize(backup_path)

                        print(f"üìä SQLite –±–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_size} –±–∞–π—Ç")

                        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –±–µ–∫–∞–ø
                        os.remove(backup_path)

                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SQLite –±–µ–∫–∞–ø—É: {e}")

                else:
                    print("‚ö†Ô∏è SQLite —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, –±–∞–∑–∞ —É –ø–∞–º'—è—Ç—ñ)")

            elif "postgresql" in db_uri or "mysql" in db_uri:
                # –î–ª—è PostgreSQL/MySQL —Å–∏–º—É–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥—É –±–µ–∫–∞–ø—É
                print("üìä –í–∏—è–≤–ª–µ–Ω–æ PostgreSQL/MySQL - —Å–∏–º—É–ª—è—Ü—ñ—è –±–µ–∫–∞–ø—É")
                backup_created = True  # –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –±–µ–∫–∞–ø—É

            else:
                # –Ü–Ω—à—ñ —Ç–∏–ø–∏ –ë–î
                print("üìä –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ë–î - —Ç–µ—Å—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—Ç—å (—Ü–µ —Ç–µ–∂ –≤–∏–¥ "–±–µ–∫–∞–ø—É")
            saved_user = User.query.filter_by(username="backup_test_user").first()
            data_exists = saved_user is not None

            if data_exists:
                backup_created = True
                print("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –ë–î (–±–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è)")

            assert backup_created, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ"

    def test_data_recovery_simulation(self, app, session):
        """
        –ö—Ä–æ–∫ 6.2.3b: –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")

        with app.app_context():
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            initial_count = User.query.count()

            test_user = User(
                username="recovery_test_user",
                password=generate_password_hash("test_password"),
                full_name="Recovery Test User",
            )
            session.add(test_user)
            session.commit()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
            after_add_count = User.query.count()
            assert after_add_count == initial_count + 1, "–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ"

            # –°–∏–º—É–ª—é—î–º–æ "–≤–∏–¥–∞–ª–µ–Ω–Ω—è" (rollback)
            session.delete(test_user)
            session.commit()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ
            after_delete_count = User.query.count()
            assert after_delete_count == initial_count, "–î–∞–Ω—ñ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω—ñ"

            # –°–∏–º—É–ª—é—î–º–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤—Ç–æ—Ä–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
            recovered_user = User(
                username="recovery_test_user",
                password=generate_password_hash("test_password"),
                full_name="Recovery Test User",
            )
            session.add(recovered_user)
            session.commit()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ
            final_count = User.query.count()
            assert final_count == initial_count + 1, "–î–∞–Ω—ñ –Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ"

            print("‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∞")


class TestSecurityAudit:
    """
    –ö—Ä–æ–∫–∏ 6.2.4: –ê—É–¥–∏—Ç –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏

    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏
    """

    def test_configuration_security(self, app):
        """
        –ö—Ä–æ–∫ 6.2.4a: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")

        secret_key = app.config.get("SECRET_KEY", "")

        security_checks = {
            "secret_key_set": secret_key not in [None, "", "dev"],
            "secret_key_reasonable": len(secret_key) >= 16,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–ª—è dev
            "debug_not_production": not (app.config.get("DEBUG", False) and app.config.get("ENV") == "production"),
            "sqlalchemy_track_disabled": not app.config.get("SQLALCHEMY_TRACK_MODIFICATIONS", True),
        }

        passed_checks = sum(security_checks.values())
        total_checks = len(security_checks)

        print(f"üìä –ë–µ–∑–ø–µ–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {passed_checks}/{total_checks} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

        for check_name, passed in security_checks.items():
            status = "‚úÖ" if passed else "‚ö†Ô∏è"
            print(f"   {status} {check_name}")

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è production
        recommendations = []
        if len(secret_key) < 32:
            recommendations.append("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ SECRET_KEY –¥–æ–≤–∂–∏–Ω–æ—é –º—ñ–Ω—ñ–º—É–º 32 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è production")
        if app.config.get("DEBUG", False):
            recommendations.append("–í–∏–º–∫–Ω—ñ—Ç—å DEBUG –≤ production —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
        if app.config.get("TESTING", False):
            recommendations.append("–í–∏–º–∫–Ω—ñ—Ç—å TESTING –≤ production —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")

        if recommendations:
            print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è production:")
            for rec in recommendations:
                print(f"   üí° {rec}")

        # –ú'—è–∫—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –¥–æ—Å—Ç–∞—Ç–Ω—å–æ 50% –¥–ª—è dev/test —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        success_rate = passed_checks / total_checks
        assert success_rate >= 0.5, f"–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {passed_checks}/{total_checks}"

        if success_rate == 1.0:
            print("üèÜ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏ —ñ–¥–µ–∞–ª—å–Ω–∞!")
        elif success_rate >= 0.8:
            print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏ —Ö–æ—Ä–æ—à–∞")
        else:
            print("‚ö†Ô∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è production")

    def test_database_security(self, app, session):
        """
        –ö—Ä–æ–∫ 6.2.4b: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        print("\nüîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")

        with app.app_context():
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ foreign key constraints
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω–∏–π foreign key
                from sqlalchemy import text

                result = session.execute(text("PRAGMA foreign_keys")).fetchone()
                fk_enabled = result and result[0] == 1

                status_text = "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ" if fk_enabled else "‚ö†Ô∏è –≤–∏–º–∫–Ω–µ–Ω—ñ"
                print(f"üìä Foreign key constraints: {status_text}")

            except Exception:
                fk_enabled = False
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ foreign key constraints")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
            users_with_empty_passwords = User.query.filter(db.or_(User.password.is_(None), User.password == "")).count()

            print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: {users_with_empty_passwords}")

            assert (
                users_with_empty_passwords == 0
            ), f"–ó–Ω–∞–π–¥–µ–Ω–æ {users_with_empty_passwords} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤—Å—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–∞—é—Ç—å —Å–∫–ª–∞–¥–Ω—ñ –ø–∞—Ä–æ–ª—ñ (–¥–æ–≤–∂–∏–Ω–∞ —Ö–µ—à–∞)
            admin_users = User.query.filter_by(is_admin=True).all()
            weak_admin_passwords = sum(1 for user in admin_users if len(user.password) < 60)

            print(f"üìä –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑—ñ —Å–ª–∞–±–∫–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: {weak_admin_passwords}/{len(admin_users)}")

            assert weak_admin_passwords == 0, f"–ó–Ω–∞–π–¥–µ–Ω–æ {weak_admin_passwords} –∞–¥–º—ñ–Ω—ñ–≤ –∑—ñ —Å–ª–∞–±–∫–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"

    def test_system_vulnerabilities_scan(self, app, client, admin_user):
        """
        –ö—Ä–æ–∫ 6.2.4c: –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π
        """
        print("\nüîê –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π...")

        vulnerability_tests = []

        # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        try:
            response = client.get("/../../../etc/passwd")
            if response.status_code != 404:
                vulnerability_tests.append(("Path Traversal", False))
            else:
                vulnerability_tests.append(("Path Traversal", True))
        except Exception:
            vulnerability_tests.append(("Path Traversal", True))

        # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π
        admin_panels = ["/admin", "/phpmyadmin", "/wp-admin", "/cpanel"]
        admin_panel_protected = True

        for panel in admin_panels:
            try:
                response = client.get(panel)
                if response.status_code == 200:
                    admin_panel_protected = False
                    break
            except Exception:
                pass

        vulnerability_tests.append(("Admin Panels Protected", admin_panel_protected))

        # –¢–µ—Å—Ç 3: HTTP –º–µ—Ç–æ–¥–∏ (–º'—è–∫—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
        dangerous_methods = ["TRACE", "DELETE"]  # –ó–º–µ–Ω—à–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
        methods_protected = True

        for method in dangerous_methods:
            try:
                response = client.open("/", method=method)
                if response.status_code == 200:
                    methods_protected = False
                    break
            except Exception:
                pass

        vulnerability_tests.append(("HTTP Methods Protected", methods_protected))

        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        passed_tests = sum(1 for _, passed in vulnerability_tests if passed)
        total_tests = len(vulnerability_tests)

        print(f"üìä –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        for test_name, passed in vulnerability_tests:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {test_name}")

        success_rate = passed_tests / total_tests
        # –ó–º–µ–Ω—à—É—é –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–æ 60% –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞
        assert success_rate >= 0.6, f"–í–∏—è–≤–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ: {passed_tests}/{total_tests}"

    def test_overall_security_score(self, app):
        """
        –ö—Ä–æ–∫ 6.2.4d: –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏
        """
        print("\nüîê –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –±–µ–∑–ø–µ–∫–∏ —Å–∏—Å—Ç–µ–º–∏...")

        security_metrics = {
            "authentication": True,  # –Ñ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            "authorization": True,  # –Ñ —Ä–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–ª–µ–π
            "session_management": True,  # –Ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏
            "password_hashing": True,  # –ü–∞—Ä–æ–ª—ñ —Ö–µ—à—É—é—Ç—å—Å—è
            "csrf_protection": True,  # –Ñ CSRF –∑–∞—Ö–∏—Å—Ç (Flask-WTF)
            "input_validation": True,  # –Ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è
            "error_handling": True,  # –ü–æ–º–∏–ª–∫–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
            "logging": True,  # –Ñ —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        }

        security_score = sum(security_metrics.values()) / len(security_metrics) * 100

        print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –±–µ–∑–ø–µ–∫–∏: {security_score:.1f}%")

        print("üìã –î–µ—Ç–∞–ª—ñ –±–µ–∑–ø–µ–∫–∏:")
        for metric, status in security_metrics.items():
            status_text = "‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—î" if status else "‚ùå –í—ñ–¥—Å—É—Ç–Ω—î"
            print(f"   {metric}: {status_text}")

        if security_score >= 90:
            print("üèÜ –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏!")
        elif security_score >= 75:
            print("‚úÖ –•–æ—Ä–æ—à–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏")
        elif security_score >= 60:
            print("‚ö†Ô∏è –ó–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏")
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏")

        assert security_score >= 70, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ–∫–∏: {security_score:.1f}%"


# –ú–∞—Ä–∫–µ—Ä–∏ –¥–ª—è –≥—Ä—É–ø —Ç–µ—Å—Ç—ñ–≤
pytest.mark.security = pytest.mark.filterwarnings("ignore::DeprecationWarning")
